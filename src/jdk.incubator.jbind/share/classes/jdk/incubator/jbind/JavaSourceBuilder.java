/*
 * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package jdk.incubator.jbind;

import java.lang.constant.ClassDesc;
import java.lang.constant.DirectMethodHandleDesc;
import java.lang.invoke.MethodType;
import java.lang.invoke.VarHandle.VarHandleDesc;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import jdk.incubator.foreign.FunctionDescriptor;
import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.SequenceLayout;
import jdk.incubator.foreign.ValueLayout;
import jdk.incubator.jextract.Declaration;

/**
 * A helper class to generate header interface class in source form.
 * After aggregating various constituents of a .java source, build
 * method is called to get overall generated source string.
 */
class JavaSourceBuilder {
    // buffer
    protected StringBuffer sb;
    // current line alignment (number of 4-spaces)
    protected int align;
    protected ConstantHelper constantHelper;

    JavaSourceBuilder(ConstantHelper constantHelper, int align) {
        super();
        this.constantHelper = constantHelper;
        this.align = align;
        this.sb = new StringBuffer();
    }

    JavaSourceBuilder(ConstantHelper constantHelper) {
        this(constantHelper, 0);
    }

    protected int align() {
        return align;
    }

    final String PUB_CLS_MODS = "public final ";
    final String PUB_MODS = "public static final ";
    final String PRI_MODS = "private static final ";

    protected void addPackagePrefix(String pkgName) {
        assert pkgName.indexOf('/') == -1 : "package name invalid: " + pkgName;
        sb.append("// Generated by jbind\n\n");
        if (!pkgName.isEmpty()) {
            sb.append("package ");
            sb.append(pkgName);
            sb.append(";\n\n");
        }
        addImportSection();
    }

    protected void addImportSection() {
        sb.append("import jdk.incubator.jbind.core.*;\n");
        sb.append("import java.lang.invoke.MethodHandle;\n");
        sb.append("import java.lang.invoke.VarHandle;\n");
        sb.append("import jdk.incubator.foreign.*;\n");
        sb.append("import jdk.incubator.foreign.MemoryLayout.PathElement;\n");
        sb.append("import static jdk.incubator.foreign.CSupport.*;\n\n");
    }

    protected void addImport(String value) {
        sb.append("import " + value + ";\n");
    }

    protected void classBegin(String name) {
        indent();
        sb.append(PUB_CLS_MODS + "class ");
        sb.append(name);
        sb.append(" {\n");
        incrAlign();
    }

    protected void classBegin(boolean isStatic, String name, String superClass, String... superInterfaces) {
        indent();
        sb.append(isStatic ? PUB_MODS : PUB_CLS_MODS);
        sb.append("class ");
        sb.append(name);
        if (superClass != null && !superClass.isEmpty()) {
            sb.append(" extends " + superClass);
        }
        if (superInterfaces != null && superInterfaces.length != 0) {
            sb.append(" implements ");
            sb.append(String.join(", ", superInterfaces));
        }
        sb.append(" {\n");
        incrAlign();
    }

    protected void classEnd() {
        decrAlign();
        indent();
        sb.append("}\n");
    }

    protected void addStructConstructor(String name) {
        indent();
        sb.append("protected " + name + "(MemoryAddress addr) { super(addr); }\n");
        indent();
        sb.append(PUB_MODS + name + " at(MemoryAddress addr) { return new " + name + "(addr); }\n");
        indent();
        sb.append(PUB_MODS + name + " allocate(LongFunction<MemoryAddress> allocator, int count) {\n");
        incrAlign();
        indent();
        sb.append("return new " + name + "(allocator.apply(sizeof() * count));\n");
        decrAlign();
        indent();
        sb.append("}\n");
        indent();
        sb.append(PUB_MODS + name + " allocate(LongFunction<MemoryAddress> allocator) { return allocate(allocator, 1); }\n");
        indent();
        sb.append(PUB_CLS_MODS + name + " offset(int count) { return at(ptr().addOffset(sizeof() * count)); }\n");
    }

    protected void addLayoutMethod(String elementName, GroupLayout layout) {
        var desc = constantHelper.addLayout(elementName, layout);
        indent();
        sb.append(PUB_MODS + "GroupLayout $LAYOUT() {\n");
        incrAlign();
        indent();
        sb.append("return (GroupLayout) " + getCallString(desc) + ";\n");
        decrAlign();
        indent();
        sb.append("}\n");
        indent();
        sb.append(PUB_MODS + "long sizeof() { return $LAYOUT().byteSize(); }\n");
        indent();
        sb.append(PUB_MODS + "long offsetof(String fieldName) { return $LAYOUT().byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }\n");

        indent();
        sb.append("@Override\n");
        indent();
        sb.append(PUB_CLS_MODS + "GroupLayout getLayout() { return $LAYOUT(); }\n");
    }

    protected void addConstant(String name, Class<?> type, Object value) {
        indent();
        if (type == MemoryAddress.class || type == MemorySegment.class) {
            //todo, skip for now (address constants and string constants)
        } else {
            sb.append(PUB_MODS + type.getName() + " " + name);
            sb.append(" = ");
            if (type == float.class) {
                sb.append(value);
                sb.append("f");
            } else if (type == long.class) {
                sb.append(value);
                sb.append("L");
            } else if (type == double.class) {
                Double v = (Double) value;
                if (Double.isFinite(v)) {
                    sb.append(value);
                    sb.append("d");
                } else {
                    sb.append("Double.valueOf(\"");
                    sb.append(v.toString());
                    sb.append("\")");
                }
            } else {
                sb.append("(" + type.getName() + ")");
                sb.append(value + "L");
            }
            sb.append(";\n");
        }
    }

    public void addLayoutGetter(String javaName, MemoryLayout layout) {
        emitForwardGetter(constantHelper.addLayout(javaName, layout));
    }

    public void addVarHandleGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
        emitForwardGetter(constantHelper.addVarHandle(javaName, nativeName, layout, type, parentLayout));
    }

    public void addMethodHandleGetter(String javaName, String nativeName, MethodType mtype, FunctionDescriptor desc, boolean varargs) {
        emitForwardGetter(constantHelper.addMethodHandle(javaName, nativeName, mtype, desc, varargs));
    }

    public void addAddressGetter(String javaName, String nativeName, MemoryLayout layout) {
        emitForwardGetter(constantHelper.addAddress(javaName, nativeName, layout));
    }

    public void addConstantGetter(String javaName, Class<?> type, Object value) {
        emitForwardGetter(constantHelper.addConstant(javaName, type, value));
    }

    public void addStaticFunctionWrapper(Declaration.Function f, MethodType mtype, FunctionDescriptor desc) {
        String javaName = NamingUtils.toSafeName(f.name());
        String nativeName = NamingUtils.getSymbolInLib(f);
        boolean varargs = f.type().varargs();

        incrAlign();
        indent();
        sb.append(PUB_MODS + mtype.returnType().getName() + " " + javaName + "(");
        String delim = "";
        List<String> pNames = new ArrayList<>();
        for (int i = 0 ; i < f.parameters().size() ; i++) {
            String pName = f.parameters().get(i).name();
            if (pName.isEmpty()) {
                pName = "x" + i;
            } else {
                pName = NamingUtils.toSafeName(pName);
            }
            pNames.add(pName);
            sb.append(delim + mtype.parameterType(i).getName() + " " + pName);
            delim = ", ";
        }
        if (varargs) {
            String lastArg = "x" + f.parameters().size();
            sb.append(", Object... " + lastArg);
            pNames.add(lastArg);
        }
        sb.append(") {\n");
        incrAlign();
        indent();
        sb.append("try {\n");
        incrAlign();
        indent();
        if (!mtype.returnType().equals(void.class)) {
            sb.append("return (" + mtype.returnType().getName() + ")");
        }
        sb.append(methodHandleGetCallString(javaName, nativeName, mtype, desc, varargs))
          .append(".invokeExact(").append(String.join(", ", pNames)).append(");\n");
        decrAlign();
        indent();
        sb.append("} catch (Throwable ex) {\n");
        incrAlign();
        indent();
        sb.append("throw new AssertionError(ex);\n");
        decrAlign();
        indent();
        sb.append("}\n");
        decrAlign();
        indent();
        sb.append("}\n");
        decrAlign();
    }

    private void addFunctionalFactory(String className, MethodType mtype, FunctionDescriptor fDesc) {
        indent();
        sb.append(PUB_MODS + "MemorySegment allocate(" + className + " fi) {\n");
        incrAlign();
        indent();
        sb.append("return RuntimeHelper.upcallStub(" + className + ".class, fi, " + functionGetCallString(className, fDesc) + ", " +
                "\"" + mtype.toMethodDescriptorString() + "\");\n");
        decrAlign();
        indent();
        sb.append("}\n");
    }

    public void addFunctionalInterface(String name, MethodType mtype,  FunctionDescriptor fDesc) {
        incrAlign();
        indent();
        sb.append("public interface " + name + " {\n");
        incrAlign();
        indent();
        sb.append(mtype.returnType().getName() + " apply(");
        String delim = "";
        for (int i = 0 ; i < mtype.parameterCount() ; i++) {
            sb.append(delim + mtype.parameterType(i).getName() + " x" + i);
            delim = ", ";
        }
        sb.append(");\n");
        addFunctionalFactory(name, mtype, fDesc);
        decrAlign();
        indent();
        sb.append("}\n");
        decrAlign();
        indent();
    }

    protected String emitAdaptedVHGetter(DirectMethodHandleDesc vh, boolean isAddr) {
        indent();
        sb.append(PUB_MODS + "VarHandle " + vh.methodName() + "() {\n");
        incrAlign();
        indent();
        sb.append("return ");
        if (isAddr) {
            sb.append("MemoryHandles.asAddressVarHandle(");
        }
        sb.append(getCallString(vh));
        if (isAddr) {
            sb.append(")");
        }
        sb.append(";\n");
        decrAlign();
        indent();
        sb.append("}\n");
        return vh.methodName();
    }

    protected void beginGetter(String javaName, String typeName, int dimensions, boolean isGlobal) {
        indent();
        sb.append(isGlobal ? PUB_MODS : PUB_CLS_MODS);
        sb.append(typeName);
        sb.append(" ");
        sb.append(javaName).append("$get(");
        for (int i = 0; i < dimensions; i++) {
            if (i > 0) {
                sb.append(", ");
            }
            sb.append("long idx" + i);
        }
        sb.append(") {\n");
        incrAlign();
    }

    protected void beginSetter(String javaName, String typeName, int dimensions, boolean isGlobal) {
        indent();
        sb.append(isGlobal ? PUB_MODS : PUB_CLS_MODS);
        sb.append("void ").append(javaName).append("$set(");
        for (int i = 0; i < dimensions; i++) {
            sb.append("long idx" + i).append(", ");
        }
        sb.append(typeName);
        sb.append(" value) {\n");
        incrAlign();
    }

    private void emitVHGetter(String typeName, String vhStmt, String addrStmt, int dimensions) {
        indent();
        sb.append("return (").append(typeName).append(") ");
        sb.append(vhStmt);
        sb.append(".get(");
        sb.append(addrStmt);
        for (int i = 0; i < dimensions; i++) {
            sb.append(", idx" + i);
        }
        sb.append(");\n");
    }

    private void emitVHSetter(String vhStmt, String addrStmt, int dimensions) {
        indent();
        sb.append(vhStmt);
        sb.append(".set(");
        sb.append(addrStmt);
        for (int i = 0; i < dimensions; i++) {
            sb.append(", idx" + i);
        }
        sb.append(", value);\n");
    }

    private void emitCarrierAddr(String addrStmt, String layoutStmt, int dimensions) {
        indent();
        sb.append("MemoryAddress addr = ").append(addrStmt).append(";\n");
        if (dimensions > 0) {
            indent();
            sb.append("long offset = ").append(layoutStmt).append(".byteOffsets(\n");
            incrAlign();
            for (int i = 0; i < dimensions; i++) {
                if (i != 0) {
                    sb.append(",\n");
                }
                indent();
                sb.append("MemoryLayout.PathElement.sqeuqnceElement(idx" + i).append(")");
            }
            sb.append(");\n");
            decrAlign();
            indent();
            sb.append("addr = addr.addOffset(offset);\n");
        }
    }

    private void emitCarrierGetter(String typeName, String addrStmt, String layoutStmt, int dimensions) {
        emitCarrierAddr(addrStmt, layoutStmt, dimensions);
        indent();
        sb.append("return ").append(typeName).append(".at(addr);\n");
    }

    private void emitCarrierSetter(String typeName, String addrStmt, String layoutStmt, int dimensions) {
        emitCarrierAddr(addrStmt, layoutStmt, dimensions);
        indent();
        sb.append(typeName).append(".at(addr).asSegment().copyFrom(value.asSegment());\n");
    }

    public void addPrimitiveGlobal(String javaName, String nativeName, MemoryLayout layout, Class<?> type, int dimensions) {
        constantHelper.addLayout(javaName, layout);
        String addrStmt = getCallString(constantHelper.addAddress(javaName, nativeName, layout));
        boolean isAddr = MemoryAddress.class.isAssignableFrom(type);
        DirectMethodHandleDesc vh = constantHelper.addVarHandle(javaName, nativeName, layout, isAddr ? long.class : type, null);
        String typeName = isAddr ? "MemoryAddress" : type.getName();
        // adapted VarHandle method
        String vhMethod = emitAdaptedVHGetter(vh, isAddr);

        String vhStmt = vhMethod + "()";
        // Getter
        beginGetter(javaName, typeName, dimensions, true);
        emitVHGetter(typeName, vhStmt, addrStmt, dimensions);
        classEnd();
        // Setter
        beginSetter(javaName, typeName, dimensions, true);
        emitVHSetter(vhStmt, addrStmt, dimensions);
        classEnd();
    }

    public void addRecordGlobal(String javaName, String nativeName, MemoryLayout layout, ClassDesc CD_type, int dimensions) {
        String layoutStmt = getCallString(constantHelper.addLayout(javaName, layout));
        String typeName = simpleName(CD_type);
        String addrStmt = getCallString(constantHelper.addAddress(javaName, nativeName, layout));
        // Getter
        beginGetter(javaName, typeName, dimensions, true);
        emitCarrierGetter(typeName, addrStmt, layoutStmt, dimensions);
        classEnd();
        // Setter
        beginSetter(javaName, typeName, dimensions, true);
        emitCarrierSetter(typeName, addrStmt, layoutStmt, dimensions);
        classEnd();
    }

    private Declaration.Scoped requireRecord(Declaration parent) {
        Declaration.Scoped record = (Declaration.Scoped) parent;
        assert (record.kind() == Declaration.Scoped.Kind.UNION ||
                record.kind() == Declaration.Scoped.Kind.STRUCT);
        return record;
    }

    private void emitFieldAddr(String fieldName) {
        indent();
        sb.append(PUB_CLS_MODS).append("MemoryAddress ").append(fieldName).append("$ptr() {\n");
        incrAlign();
        indent();
        sb.append("return getFieldAddr(\"").append(fieldName).append("\");\n");
        decrAlign();
        indent();
        sb.append("}\n");
    }

    public void addPrimitiveField(String fieldName, Declaration parent, Class<?> type, int dimensions) {
        String javaName = NamingUtils.toSafeName(fieldName);
        boolean isAddr = MemoryAddress.class.isAssignableFrom(type);
        String typeName = isAddr ? "MemoryAddress" : type.getName();
        String vhStmt = "getFieldHandle(\"" + fieldName + "\", " + typeName + ".class)";
        String addrStmt = "ptr()";

        // Field address
        emitFieldAddr(javaName);
        // Getter
        beginGetter(javaName, typeName, dimensions, false);
        emitVHGetter(typeName, vhStmt, addrStmt, dimensions);
        classEnd();
        // Setter
        beginSetter(javaName, typeName, dimensions, false);
        emitVHSetter(vhStmt, addrStmt, dimensions);
        classEnd();
    }

    public void addRecordField(String fieldName, Declaration parent, ClassDesc CD_type, int dimensions) {
        String javaName = NamingUtils.toSafeName(fieldName);
        String typeName = simpleName(CD_type);
        String addrStmt = javaName + "$ptr()";
        String layoutStmt = "$LAYOUT().select(MemoryLayout.PathElement.groupElement(\"" + fieldName + "\"))";

        // Field address
        emitFieldAddr(javaName);
        // Getter
        beginGetter(javaName, typeName, dimensions, false);
        emitCarrierGetter(typeName, addrStmt, layoutStmt, dimensions);
        classEnd();
        // Setter
        beginSetter(javaName, typeName, dimensions, false);
        emitCarrierSetter(typeName, addrStmt, layoutStmt, dimensions);
        classEnd();
    }

    protected String build() {
        String res = sb.toString();
        this.sb = null;
        return res.toString();
    }

    protected void emitForwardGetter(DirectMethodHandleDesc desc) {
        incrAlign();
        indent();
        sb.append(PUB_MODS + desc.invocationType().returnType().displayName() + " " + desc.methodName() + "() {\n");
        incrAlign();
        indent();
        sb.append("return " + getCallString(desc) + ";\n");
        decrAlign();
        indent();
        sb.append("}\n");
        decrAlign();
    }

    protected String getCallString(DirectMethodHandleDesc desc) {
        return desc.owner().displayName() + "." + desc.methodName() + "()";
    }

    protected String simpleName(ClassDesc returnType) {
        String name = returnType.displayName();
        int lastNestSymbol = name.lastIndexOf('$');
        return returnType.displayName().substring(lastNestSymbol + 1);
    }

    protected String functionGetCallString(String javaName, FunctionDescriptor fDesc) {
        return getCallString(constantHelper.addFunctionDesc(javaName, fDesc));
    }

    protected String methodHandleGetCallString(String javaName, String nativeName, MethodType mt, FunctionDescriptor fDesc, boolean varargs) {
        return getCallString(constantHelper.addMethodHandle(javaName, nativeName, mt, fDesc, varargs));
    }

    protected String varHandleGetCallString(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
        return getCallString(constantHelper.addVarHandle(javaName, nativeName, layout, type, parentLayout));
    }

    protected String addressGetCallString(String javaName, String nativeName, MemoryLayout layout) {
        return getCallString(constantHelper.addAddress(javaName, nativeName, layout));
    }

    protected void indent() {
        for (int i = 0; i < align; i++) {
            sb.append("    ");
        }
    }

    protected void incrAlign() {
        align++;
    }

    protected void decrAlign() {
        align--;
    }

    public void addLineBreak() {
        sb.append("\n");
    }

    public void addLineBreaks(int lines) {
        while (lines > 0) {
            sb.append("\n");
            lines--;
        }
    }
}
