// Generated by jbind

package jdk.internal.panama;

import jdk.incubator.jbind.core.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.*;


public final class LibMacOS {
    private static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {});
    public static final class kauth_filesec extends Struct<kauth_filesec> {
        protected kauth_filesec(MemorySegment ms) { super(ms); }
        public static final kauth_filesec at(MemorySegment ms) { return new kauth_filesec(ms); }
        public final kauth_filesec offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_INT.withName("fsec_magic"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofSequence(16, C_BOOL).withName("g_guid"),
                MemoryLayout.ofSequence(4, C_INT).withName("g_guid_asint")
            ).withName("fsec_owner"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofSequence(16, C_BOOL).withName("g_guid"),
                MemoryLayout.ofSequence(4, C_INT).withName("g_guid_asint")
            ).withName("fsec_group"),
            MemoryLayout.ofStruct(
                C_INT.withName("acl_entrycount"),
                C_INT.withName("acl_flags"),
                MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                    MemoryLayout.ofUnion(
                        MemoryLayout.ofSequence(16, C_BOOL).withName("g_guid"),
                        MemoryLayout.ofSequence(4, C_INT).withName("g_guid_asint")
                    ).withName("ace_applicable"),
                    C_INT.withName("ace_flags"),
                    C_INT.withName("ace_rights")
                ).withName("kauth_ace")).withName("acl_ace")
            ).withName("fsec_acl")
        ).withName("kauth_filesec");
        public static final kauth_filesec allocate(NativeScope scope) { return new kauth_filesec(scope.allocate($LAYOUT)); }
        public static final kauth_filesec allocate(NativeScope scope, long count) { return new kauth_filesec(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle fsec_magic$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("fsec_magic")));
        public static final long fsec_magic$OFFSET = 0L;
        public final MemorySegment fsec_magic$ptr() {
            return segment().asSlice(0L);
        }
        public final int fsec_magic$get() {
            return (int) fsec_magic$VH.get(fsec_magic$ptr());
        }
        public final void fsec_magic$set(int value) {
            fsec_magic$VH.set(fsec_magic$ptr(), value);
        }



        public static final long fsec_acl$OFFSET = 36L;
        public final MemorySegment fsec_acl$ptr() {
            return segment().asSlice(36L);
        }
        public final kauth_acl fsec_acl$get() {
            return kauth_acl.at(fsec_acl$ptr());
        }
        public final void fsec_acl$set(kauth_acl value) {
            kauth_acl.at(fsec_acl$ptr()).asSegment().copyFrom(value.asSegment());
        }
    }
    public static final class kauth_acl extends Struct<kauth_acl> {
        protected kauth_acl(MemorySegment ms) { super(ms); }
        public static final kauth_acl at(MemorySegment ms) { return new kauth_acl(ms); }
        public final kauth_acl offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_INT.withName("acl_entrycount"),
            C_INT.withName("acl_flags"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                MemoryLayout.ofUnion(
                    MemoryLayout.ofSequence(16, C_BOOL).withName("g_guid"),
                    MemoryLayout.ofSequence(4, C_INT).withName("g_guid_asint")
                ).withName("ace_applicable"),
                C_INT.withName("ace_flags"),
                C_INT.withName("ace_rights")
            ).withName("kauth_ace")).withName("acl_ace")
        ).withName("kauth_acl");
        public static final kauth_acl allocate(NativeScope scope) { return new kauth_acl(scope.allocate($LAYOUT)); }
        public static final kauth_acl allocate(NativeScope scope, long count) { return new kauth_acl(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle acl_entrycount$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("acl_entrycount")));
        public static final long acl_entrycount$OFFSET = 0L;
        public final MemorySegment acl_entrycount$ptr() {
            return segment().asSlice(0L);
        }
        public final int acl_entrycount$get() {
            return (int) acl_entrycount$VH.get(acl_entrycount$ptr());
        }
        public final void acl_entrycount$set(int value) {
            acl_entrycount$VH.set(acl_entrycount$ptr(), value);
        }

        public static final VarHandle acl_flags$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("acl_flags")));
        public static final long acl_flags$OFFSET = 4L;
        public final MemorySegment acl_flags$ptr() {
            return segment().asSlice(4L);
        }
        public final int acl_flags$get() {
            return (int) acl_flags$VH.get(acl_flags$ptr());
        }
        public final void acl_flags$set(int value) {
            acl_flags$VH.set(acl_flags$ptr(), value);
        }

        public static final long acl_ace$OFFSET = 8L;
        public final MemorySegment acl_ace$ptr() {
            return segment().asSlice(8L);
        }
        public final kauth_ace acl_ace$get(long idx0) {
            MemorySegment addr = acl_ace$ptr();
            long offset = $LAYOUT.select(MemoryLayout.PathElement.groupElement("acl_ace")).byteOffset(
                MemoryLayout.PathElement.sequenceElement(idx0));
            addr = addr.asSlice(offset);
            return kauth_ace.at(addr);
        }
        public final void acl_ace$set(long idx0, kauth_ace value) {
            MemorySegment addr = acl_ace$ptr();
            long offset = $LAYOUT.select(MemoryLayout.PathElement.groupElement("acl_ace")).byteOffset(
                MemoryLayout.PathElement.sequenceElement(idx0));
            addr = addr.asSlice(offset);
            kauth_ace.at(addr).asSegment().copyFrom(value.asSegment());
        }
    }
    public static final class kauth_ace extends Struct<kauth_ace> {
        protected kauth_ace(MemorySegment ms) { super(ms); }
        public static final kauth_ace at(MemorySegment ms) { return new kauth_ace(ms); }
        public final kauth_ace offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                MemoryLayout.ofSequence(16, C_BOOL).withName("g_guid"),
                MemoryLayout.ofSequence(4, C_INT).withName("g_guid_asint")
            ).withName("ace_applicable"),
            C_INT.withName("ace_flags"),
            C_INT.withName("ace_rights")
        ).withName("kauth_ace");
        public static final kauth_ace allocate(NativeScope scope) { return new kauth_ace(scope.allocate($LAYOUT)); }
        public static final kauth_ace allocate(NativeScope scope, long count) { return new kauth_ace(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }


        public static final VarHandle ace_flags$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("ace_flags")));
        public static final long ace_flags$OFFSET = 16L;
        public final MemorySegment ace_flags$ptr() {
            return segment().asSlice(16L);
        }
        public final int ace_flags$get() {
            return (int) ace_flags$VH.get(ace_flags$ptr());
        }
        public final void ace_flags$set(int value) {
            ace_flags$VH.set(ace_flags$ptr(), value);
        }

        public static final VarHandle ace_rights$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("ace_rights")));
        public static final long ace_rights$OFFSET = 20L;
        public final MemorySegment ace_rights$ptr() {
            return segment().asSlice(20L);
        }
        public final int ace_rights$get() {
            return (int) ace_rights$VH.get(ace_rights$ptr());
        }
        public final void ace_rights$set(int value) {
            ace_rights$VH.set(ace_rights$ptr(), value);
        }
    }
    public static final int kCFStringEncodingUTF16 = (int)256L;
    public static final MemoryLayout kUTTagClassFilenameExtension$LAYOUT = C_POINTER;
    public static final MemorySegment kUTTagClassFilenameExtension$ADDR = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "kUTTagClassFilenameExtension", kUTTagClassFilenameExtension$LAYOUT);
    public static final VarHandle vh_kUTTagClassFilenameExtension = 
        MemoryHandles.asAddressVarHandle(kUTTagClassFilenameExtension$LAYOUT.varHandle(long.class));
    public static final MemoryAddress kUTTagClassFilenameExtension$get() {
        return (MemoryAddress) vh_kUTTagClassFilenameExtension.get(kUTTagClassFilenameExtension$ADDR);
    }
    public static final void kUTTagClassFilenameExtension$set(MemoryAddress value) {
        vh_kUTTagClassFilenameExtension.set(kUTTagClassFilenameExtension$ADDR, value);
    }
    public static final MemoryLayout kUTTagClassMIMEType$LAYOUT = C_POINTER;
    public static final MemorySegment kUTTagClassMIMEType$ADDR = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "kUTTagClassMIMEType", kUTTagClassMIMEType$LAYOUT);
    public static final VarHandle vh_kUTTagClassMIMEType = 
        MemoryHandles.asAddressVarHandle(kUTTagClassMIMEType$LAYOUT.varHandle(long.class));
    public static final MemoryAddress kUTTagClassMIMEType$get() {
        return (MemoryAddress) vh_kUTTagClassMIMEType.get(kUTTagClassMIMEType$ADDR);
    }
    public static final void kUTTagClassMIMEType$set(MemoryAddress value) {
        vh_kUTTagClassMIMEType.set(kUTTagClassMIMEType$ADDR, value);
    }
    public static final MethodHandle mh___CFRangeMake = RuntimeHelper.downcallHandle(
        LIBRARIES, "__CFRangeMake",
        "(JJ)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_LONG.withName("location"),
            C_LONG.withName("length")
        ),
            C_LONG,
            C_LONG
        ), false
    );
    public static final jdk.incubator.foreign.MemorySegment __CFRangeMake(long loc, long len) {
        try {
            return (jdk.incubator.foreign.MemorySegment) mh___CFRangeMake.invokeExact(loc, len);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_CFRelease = RuntimeHelper.downcallHandle(
        LIBRARIES, "CFRelease",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        ), false
    );
    public static final void CFRelease(jdk.incubator.foreign.Addressable cf) {
        try {
            mh_CFRelease.invokeExact(cf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_CFStringCreateWithCharacters = RuntimeHelper.downcallHandle(
        LIBRARIES, "CFStringCreateWithCharacters",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress CFStringCreateWithCharacters(jdk.incubator.foreign.Addressable alloc, jdk.incubator.foreign.Addressable chars, long numChars) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_CFStringCreateWithCharacters.invokeExact(alloc.address(), chars.address(), numChars);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_CFStringCreateMutable = RuntimeHelper.downcallHandle(
        LIBRARIES, "CFStringCreateMutable",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_LONG
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress CFStringCreateMutable(jdk.incubator.foreign.Addressable alloc, long maxLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_CFStringCreateMutable.invokeExact(alloc.address(), maxLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_CFStringGetLength = RuntimeHelper.downcallHandle(
        LIBRARIES, "CFStringGetLength",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        FunctionDescriptor.of(C_LONG,
            C_POINTER
        ), false
    );
    public static final long CFStringGetLength(jdk.incubator.foreign.Addressable theString) {
        try {
            return (long) mh_CFStringGetLength.invokeExact(theString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_CFStringGetCharacters = RuntimeHelper.downcallHandle(
        LIBRARIES, "CFStringGetCharacters",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            MemoryLayout.ofStruct(
                C_LONG.withName("location"),
                C_LONG.withName("length")
            ),
            C_POINTER
        ), false
    );
    public static final void CFStringGetCharacters(jdk.incubator.foreign.Addressable theString, jdk.incubator.foreign.MemorySegment range, jdk.incubator.foreign.Addressable buffer) {
        try {
            mh_CFStringGetCharacters.invokeExact(theString.address(), range, buffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_CFStringGetCString = RuntimeHelper.downcallHandle(
        LIBRARIES, "CFStringGetCString",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)B",
        FunctionDescriptor.of(C_BOOL,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT
        ), false
    );
    public static final byte CFStringGetCString(jdk.incubator.foreign.Addressable theString, jdk.incubator.foreign.Addressable buffer, long bufferSize, int encoding) {
        try {
            return (byte) mh_CFStringGetCString.invokeExact(theString.address(), buffer.address(), bufferSize, encoding);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_CFStringGetCharactersPtr = RuntimeHelper.downcallHandle(
        LIBRARIES, "CFStringGetCharactersPtr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress CFStringGetCharactersPtr(jdk.incubator.foreign.Addressable theString) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_CFStringGetCharactersPtr.invokeExact(theString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_CFStringAppendCharacters = RuntimeHelper.downcallHandle(
        LIBRARIES, "CFStringAppendCharacters",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_LONG
        ), false
    );
    public static final void CFStringAppendCharacters(jdk.incubator.foreign.Addressable theString, jdk.incubator.foreign.Addressable chars, long numChars) {
        try {
            mh_CFStringAppendCharacters.invokeExact(theString.address(), chars.address(), numChars);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_CFStringNormalize = RuntimeHelper.downcallHandle(
        LIBRARIES, "CFStringNormalize",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_LONG
        ), false
    );
    public static final void CFStringNormalize(jdk.incubator.foreign.Addressable theString, long theForm) {
        try {
            mh_CFStringNormalize.invokeExact(theString.address(), theForm);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_UTTypeCreatePreferredIdentifierForTag = RuntimeHelper.downcallHandle(
        LIBRARIES, "UTTypeCreatePreferredIdentifierForTag",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress UTTypeCreatePreferredIdentifierForTag(jdk.incubator.foreign.Addressable inTagClass, jdk.incubator.foreign.Addressable inTag, jdk.incubator.foreign.Addressable inConformingToUTI) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_UTTypeCreatePreferredIdentifierForTag.invokeExact(inTagClass.address(), inTag.address(), inConformingToUTI.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_UTTypeCopyPreferredTagWithClass = RuntimeHelper.downcallHandle(
        LIBRARIES, "UTTypeCopyPreferredTagWithClass",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress UTTypeCopyPreferredTagWithClass(jdk.incubator.foreign.Addressable inUTI, jdk.incubator.foreign.Addressable inTagClass) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_UTTypeCopyPreferredTagWithClass.invokeExact(inUTI.address(), inTagClass.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
}

