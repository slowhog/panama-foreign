// Generated by jbind

package jdk.internal.panama;

import jdk.incubator.jbind.core.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;


public final class LibC {
    private static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {});
    public static final class stat extends Struct<stat> {
        protected stat(MemorySegment ms) { super(ms); }
        public static final stat at(MemorySegment ms) { return new stat(ms); }
        public final stat offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_INT.withName("st_dev"),
            C_SHORT.withName("st_mode"),
            C_SHORT.withName("st_nlink"),
            C_LONGLONG.withName("st_ino"),
            C_INT.withName("st_uid"),
            C_INT.withName("st_gid"),
            C_INT.withName("st_rdev"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_atimespec"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_mtimespec"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_ctimespec"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_birthtimespec"),
            C_LONGLONG.withName("st_size"),
            C_LONGLONG.withName("st_blocks"),
            C_INT.withName("st_blksize"),
            C_INT.withName("st_flags"),
            C_INT.withName("st_gen"),
            C_INT.withName("st_lspare"),
            MemoryLayout.ofSequence(2, C_LONGLONG).withName("st_qspare")
        ).withName("stat");
        public static final stat allocate(NativeScope scope) { return new stat(scope.allocate($LAYOUT)); }
        public static final stat allocate(NativeScope scope, long count) { return new stat(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle st_dev$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_dev")));
        public static final long st_dev$OFFSET = 0L;
        public final MemorySegment st_dev$ptr() {
            return segment().asSlice(0L);
        }
        public final int st_dev$get() {
            return (int) st_dev$VH.get(st_dev$ptr());
        }
        public final void st_dev$set(int value) {
            st_dev$VH.set(st_dev$ptr(), value);
        }

        public static final VarHandle st_mode$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_mode")));
        public static final long st_mode$OFFSET = 4L;
        public final MemorySegment st_mode$ptr() {
            return segment().asSlice(4L);
        }
        public final short st_mode$get() {
            return (short) st_mode$VH.get(st_mode$ptr());
        }
        public final void st_mode$set(short value) {
            st_mode$VH.set(st_mode$ptr(), value);
        }

        public static final VarHandle st_nlink$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_nlink")));
        public static final long st_nlink$OFFSET = 6L;
        public final MemorySegment st_nlink$ptr() {
            return segment().asSlice(6L);
        }
        public final short st_nlink$get() {
            return (short) st_nlink$VH.get(st_nlink$ptr());
        }
        public final void st_nlink$set(short value) {
            st_nlink$VH.set(st_nlink$ptr(), value);
        }

        public static final VarHandle st_ino$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_ino")));
        public static final long st_ino$OFFSET = 8L;
        public final MemorySegment st_ino$ptr() {
            return segment().asSlice(8L);
        }
        public final long st_ino$get() {
            return (long) st_ino$VH.get(st_ino$ptr());
        }
        public final void st_ino$set(long value) {
            st_ino$VH.set(st_ino$ptr(), value);
        }

        public static final VarHandle st_uid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_uid")));
        public static final long st_uid$OFFSET = 16L;
        public final MemorySegment st_uid$ptr() {
            return segment().asSlice(16L);
        }
        public final int st_uid$get() {
            return (int) st_uid$VH.get(st_uid$ptr());
        }
        public final void st_uid$set(int value) {
            st_uid$VH.set(st_uid$ptr(), value);
        }

        public static final VarHandle st_gid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_gid")));
        public static final long st_gid$OFFSET = 20L;
        public final MemorySegment st_gid$ptr() {
            return segment().asSlice(20L);
        }
        public final int st_gid$get() {
            return (int) st_gid$VH.get(st_gid$ptr());
        }
        public final void st_gid$set(int value) {
            st_gid$VH.set(st_gid$ptr(), value);
        }

        public static final VarHandle st_rdev$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_rdev")));
        public static final long st_rdev$OFFSET = 24L;
        public final MemorySegment st_rdev$ptr() {
            return segment().asSlice(24L);
        }
        public final int st_rdev$get() {
            return (int) st_rdev$VH.get(st_rdev$ptr());
        }
        public final void st_rdev$set(int value) {
            st_rdev$VH.set(st_rdev$ptr(), value);
        }

        public static final long st_atimespec$OFFSET = 32L;
        public final MemorySegment st_atimespec$ptr() {
            return segment().asSlice(32L);
        }
        public final timespec st_atimespec$get() {
            return timespec.at(st_atimespec$ptr());
        }
        public final void st_atimespec$set(timespec value) {
            timespec.at(st_atimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final long st_mtimespec$OFFSET = 48L;
        public final MemorySegment st_mtimespec$ptr() {
            return segment().asSlice(48L);
        }
        public final timespec st_mtimespec$get() {
            return timespec.at(st_mtimespec$ptr());
        }
        public final void st_mtimespec$set(timespec value) {
            timespec.at(st_mtimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final long st_ctimespec$OFFSET = 64L;
        public final MemorySegment st_ctimespec$ptr() {
            return segment().asSlice(64L);
        }
        public final timespec st_ctimespec$get() {
            return timespec.at(st_ctimespec$ptr());
        }
        public final void st_ctimespec$set(timespec value) {
            timespec.at(st_ctimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final long st_birthtimespec$OFFSET = 80L;
        public final MemorySegment st_birthtimespec$ptr() {
            return segment().asSlice(80L);
        }
        public final timespec st_birthtimespec$get() {
            return timespec.at(st_birthtimespec$ptr());
        }
        public final void st_birthtimespec$set(timespec value) {
            timespec.at(st_birthtimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle st_size$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_size")));
        public static final long st_size$OFFSET = 96L;
        public final MemorySegment st_size$ptr() {
            return segment().asSlice(96L);
        }
        public final long st_size$get() {
            return (long) st_size$VH.get(st_size$ptr());
        }
        public final void st_size$set(long value) {
            st_size$VH.set(st_size$ptr(), value);
        }

        public static final VarHandle st_blocks$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_blocks")));
        public static final long st_blocks$OFFSET = 104L;
        public final MemorySegment st_blocks$ptr() {
            return segment().asSlice(104L);
        }
        public final long st_blocks$get() {
            return (long) st_blocks$VH.get(st_blocks$ptr());
        }
        public final void st_blocks$set(long value) {
            st_blocks$VH.set(st_blocks$ptr(), value);
        }

        public static final VarHandle st_blksize$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_blksize")));
        public static final long st_blksize$OFFSET = 112L;
        public final MemorySegment st_blksize$ptr() {
            return segment().asSlice(112L);
        }
        public final int st_blksize$get() {
            return (int) st_blksize$VH.get(st_blksize$ptr());
        }
        public final void st_blksize$set(int value) {
            st_blksize$VH.set(st_blksize$ptr(), value);
        }

        public static final VarHandle st_flags$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_flags")));
        public static final long st_flags$OFFSET = 116L;
        public final MemorySegment st_flags$ptr() {
            return segment().asSlice(116L);
        }
        public final int st_flags$get() {
            return (int) st_flags$VH.get(st_flags$ptr());
        }
        public final void st_flags$set(int value) {
            st_flags$VH.set(st_flags$ptr(), value);
        }

        public static final VarHandle st_gen$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_gen")));
        public static final long st_gen$OFFSET = 120L;
        public final MemorySegment st_gen$ptr() {
            return segment().asSlice(120L);
        }
        public final int st_gen$get() {
            return (int) st_gen$VH.get(st_gen$ptr());
        }
        public final void st_gen$set(int value) {
            st_gen$VH.set(st_gen$ptr(), value);
        }

        public static final VarHandle st_lspare$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_lspare")));
        public static final long st_lspare$OFFSET = 124L;
        public final MemorySegment st_lspare$ptr() {
            return segment().asSlice(124L);
        }
        public final int st_lspare$get() {
            return (int) st_lspare$VH.get(st_lspare$ptr());
        }
        public final void st_lspare$set(int value) {
            st_lspare$VH.set(st_lspare$ptr(), value);
        }

        public static final VarHandle st_qspare$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_qspare")));
        public static final long st_qspare$OFFSET = 128L;
        public final MemorySegment st_qspare$ptr() {
            return segment().asSlice(128L);
        }
        public final long st_qspare$get(long idx0) {
            return (long) st_qspare$VH.get(st_qspare$ptr(), idx0);
        }
        public final void st_qspare$set(long idx0, long value) {
            st_qspare$VH.set(st_qspare$ptr(), idx0, value);
        }
    }
    public static final class timespec extends Struct<timespec> {
        protected timespec(MemorySegment ms) { super(ms); }
        public static final timespec at(MemorySegment ms) { return new timespec(ms); }
        public final timespec offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("timespec");
        public static final timespec allocate(NativeScope scope) { return new timespec(scope.allocate($LAYOUT)); }
        public static final timespec allocate(NativeScope scope, long count) { return new timespec(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle tv_sec$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("tv_sec")));
        public static final long tv_sec$OFFSET = 0L;
        public final MemorySegment tv_sec$ptr() {
            return segment().asSlice(0L);
        }
        public final long tv_sec$get() {
            return (long) tv_sec$VH.get(tv_sec$ptr());
        }
        public final void tv_sec$set(long value) {
            tv_sec$VH.set(tv_sec$ptr(), value);
        }

        public static final VarHandle tv_nsec$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("tv_nsec")));
        public static final long tv_nsec$OFFSET = 8L;
        public final MemorySegment tv_nsec$ptr() {
            return segment().asSlice(8L);
        }
        public final long tv_nsec$get() {
            return (long) tv_nsec$VH.get(tv_nsec$ptr());
        }
        public final void tv_nsec$set(long value) {
            tv_nsec$VH.set(tv_nsec$ptr(), value);
        }
    }
    public static final class stat64 extends Struct<stat64> {
        protected stat64(MemorySegment ms) { super(ms); }
        public static final stat64 at(MemorySegment ms) { return new stat64(ms); }
        public final stat64 offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_INT.withName("st_dev"),
            C_SHORT.withName("st_mode"),
            C_SHORT.withName("st_nlink"),
            C_LONGLONG.withName("st_ino"),
            C_INT.withName("st_uid"),
            C_INT.withName("st_gid"),
            C_INT.withName("st_rdev"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_atimespec"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_mtimespec"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_ctimespec"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_birthtimespec"),
            C_LONGLONG.withName("st_size"),
            C_LONGLONG.withName("st_blocks"),
            C_INT.withName("st_blksize"),
            C_INT.withName("st_flags"),
            C_INT.withName("st_gen"),
            C_INT.withName("st_lspare"),
            MemoryLayout.ofSequence(2, C_LONGLONG).withName("st_qspare")
        ).withName("stat64");
        public static final stat64 allocate(NativeScope scope) { return new stat64(scope.allocate($LAYOUT)); }
        public static final stat64 allocate(NativeScope scope, long count) { return new stat64(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle st_dev$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_dev")));
        public static final long st_dev$OFFSET = 0L;
        public final MemorySegment st_dev$ptr() {
            return segment().asSlice(0L);
        }
        public final int st_dev$get() {
            return (int) st_dev$VH.get(st_dev$ptr());
        }
        public final void st_dev$set(int value) {
            st_dev$VH.set(st_dev$ptr(), value);
        }

        public static final VarHandle st_mode$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_mode")));
        public static final long st_mode$OFFSET = 4L;
        public final MemorySegment st_mode$ptr() {
            return segment().asSlice(4L);
        }
        public final short st_mode$get() {
            return (short) st_mode$VH.get(st_mode$ptr());
        }
        public final void st_mode$set(short value) {
            st_mode$VH.set(st_mode$ptr(), value);
        }

        public static final VarHandle st_nlink$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_nlink")));
        public static final long st_nlink$OFFSET = 6L;
        public final MemorySegment st_nlink$ptr() {
            return segment().asSlice(6L);
        }
        public final short st_nlink$get() {
            return (short) st_nlink$VH.get(st_nlink$ptr());
        }
        public final void st_nlink$set(short value) {
            st_nlink$VH.set(st_nlink$ptr(), value);
        }

        public static final VarHandle st_ino$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_ino")));
        public static final long st_ino$OFFSET = 8L;
        public final MemorySegment st_ino$ptr() {
            return segment().asSlice(8L);
        }
        public final long st_ino$get() {
            return (long) st_ino$VH.get(st_ino$ptr());
        }
        public final void st_ino$set(long value) {
            st_ino$VH.set(st_ino$ptr(), value);
        }

        public static final VarHandle st_uid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_uid")));
        public static final long st_uid$OFFSET = 16L;
        public final MemorySegment st_uid$ptr() {
            return segment().asSlice(16L);
        }
        public final int st_uid$get() {
            return (int) st_uid$VH.get(st_uid$ptr());
        }
        public final void st_uid$set(int value) {
            st_uid$VH.set(st_uid$ptr(), value);
        }

        public static final VarHandle st_gid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_gid")));
        public static final long st_gid$OFFSET = 20L;
        public final MemorySegment st_gid$ptr() {
            return segment().asSlice(20L);
        }
        public final int st_gid$get() {
            return (int) st_gid$VH.get(st_gid$ptr());
        }
        public final void st_gid$set(int value) {
            st_gid$VH.set(st_gid$ptr(), value);
        }

        public static final VarHandle st_rdev$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_rdev")));
        public static final long st_rdev$OFFSET = 24L;
        public final MemorySegment st_rdev$ptr() {
            return segment().asSlice(24L);
        }
        public final int st_rdev$get() {
            return (int) st_rdev$VH.get(st_rdev$ptr());
        }
        public final void st_rdev$set(int value) {
            st_rdev$VH.set(st_rdev$ptr(), value);
        }

        public static final long st_atimespec$OFFSET = 32L;
        public final MemorySegment st_atimespec$ptr() {
            return segment().asSlice(32L);
        }
        public final timespec st_atimespec$get() {
            return timespec.at(st_atimespec$ptr());
        }
        public final void st_atimespec$set(timespec value) {
            timespec.at(st_atimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final long st_mtimespec$OFFSET = 48L;
        public final MemorySegment st_mtimespec$ptr() {
            return segment().asSlice(48L);
        }
        public final timespec st_mtimespec$get() {
            return timespec.at(st_mtimespec$ptr());
        }
        public final void st_mtimespec$set(timespec value) {
            timespec.at(st_mtimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final long st_ctimespec$OFFSET = 64L;
        public final MemorySegment st_ctimespec$ptr() {
            return segment().asSlice(64L);
        }
        public final timespec st_ctimespec$get() {
            return timespec.at(st_ctimespec$ptr());
        }
        public final void st_ctimespec$set(timespec value) {
            timespec.at(st_ctimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final long st_birthtimespec$OFFSET = 80L;
        public final MemorySegment st_birthtimespec$ptr() {
            return segment().asSlice(80L);
        }
        public final timespec st_birthtimespec$get() {
            return timespec.at(st_birthtimespec$ptr());
        }
        public final void st_birthtimespec$set(timespec value) {
            timespec.at(st_birthtimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle st_size$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_size")));
        public static final long st_size$OFFSET = 96L;
        public final MemorySegment st_size$ptr() {
            return segment().asSlice(96L);
        }
        public final long st_size$get() {
            return (long) st_size$VH.get(st_size$ptr());
        }
        public final void st_size$set(long value) {
            st_size$VH.set(st_size$ptr(), value);
        }

        public static final VarHandle st_blocks$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_blocks")));
        public static final long st_blocks$OFFSET = 104L;
        public final MemorySegment st_blocks$ptr() {
            return segment().asSlice(104L);
        }
        public final long st_blocks$get() {
            return (long) st_blocks$VH.get(st_blocks$ptr());
        }
        public final void st_blocks$set(long value) {
            st_blocks$VH.set(st_blocks$ptr(), value);
        }

        public static final VarHandle st_blksize$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_blksize")));
        public static final long st_blksize$OFFSET = 112L;
        public final MemorySegment st_blksize$ptr() {
            return segment().asSlice(112L);
        }
        public final int st_blksize$get() {
            return (int) st_blksize$VH.get(st_blksize$ptr());
        }
        public final void st_blksize$set(int value) {
            st_blksize$VH.set(st_blksize$ptr(), value);
        }

        public static final VarHandle st_flags$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_flags")));
        public static final long st_flags$OFFSET = 116L;
        public final MemorySegment st_flags$ptr() {
            return segment().asSlice(116L);
        }
        public final int st_flags$get() {
            return (int) st_flags$VH.get(st_flags$ptr());
        }
        public final void st_flags$set(int value) {
            st_flags$VH.set(st_flags$ptr(), value);
        }

        public static final VarHandle st_gen$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_gen")));
        public static final long st_gen$OFFSET = 120L;
        public final MemorySegment st_gen$ptr() {
            return segment().asSlice(120L);
        }
        public final int st_gen$get() {
            return (int) st_gen$VH.get(st_gen$ptr());
        }
        public final void st_gen$set(int value) {
            st_gen$VH.set(st_gen$ptr(), value);
        }

        public static final VarHandle st_lspare$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_lspare")));
        public static final long st_lspare$OFFSET = 124L;
        public final MemorySegment st_lspare$ptr() {
            return segment().asSlice(124L);
        }
        public final int st_lspare$get() {
            return (int) st_lspare$VH.get(st_lspare$ptr());
        }
        public final void st_lspare$set(int value) {
            st_lspare$VH.set(st_lspare$ptr(), value);
        }

        public static final VarHandle st_qspare$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("st_qspare")));
        public static final long st_qspare$OFFSET = 128L;
        public final MemorySegment st_qspare$ptr() {
            return segment().asSlice(128L);
        }
        public final long st_qspare$get(long idx0) {
            return (long) st_qspare$VH.get(st_qspare$ptr(), idx0);
        }
        public final void st_qspare$set(long idx0, long value) {
            st_qspare$VH.set(st_qspare$ptr(), idx0, value);
        }
    }
    public static final class flock extends Struct<flock> {
        protected flock(MemorySegment ms) { super(ms); }
        public static final flock at(MemorySegment ms) { return new flock(ms); }
        public final flock offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONGLONG.withName("l_start"),
            C_LONGLONG.withName("l_len"),
            C_INT.withName("l_pid"),
            C_SHORT.withName("l_type"),
            C_SHORT.withName("l_whence")
        ).withName("flock");
        public static final flock allocate(NativeScope scope) { return new flock(scope.allocate($LAYOUT)); }
        public static final flock allocate(NativeScope scope, long count) { return new flock(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle l_start$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("l_start")));
        public static final long l_start$OFFSET = 0L;
        public final MemorySegment l_start$ptr() {
            return segment().asSlice(0L);
        }
        public final long l_start$get() {
            return (long) l_start$VH.get(l_start$ptr());
        }
        public final void l_start$set(long value) {
            l_start$VH.set(l_start$ptr(), value);
        }

        public static final VarHandle l_len$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("l_len")));
        public static final long l_len$OFFSET = 8L;
        public final MemorySegment l_len$ptr() {
            return segment().asSlice(8L);
        }
        public final long l_len$get() {
            return (long) l_len$VH.get(l_len$ptr());
        }
        public final void l_len$set(long value) {
            l_len$VH.set(l_len$ptr(), value);
        }

        public static final VarHandle l_pid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("l_pid")));
        public static final long l_pid$OFFSET = 16L;
        public final MemorySegment l_pid$ptr() {
            return segment().asSlice(16L);
        }
        public final int l_pid$get() {
            return (int) l_pid$VH.get(l_pid$ptr());
        }
        public final void l_pid$set(int value) {
            l_pid$VH.set(l_pid$ptr(), value);
        }

        public static final VarHandle l_type$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("l_type")));
        public static final long l_type$OFFSET = 20L;
        public final MemorySegment l_type$ptr() {
            return segment().asSlice(20L);
        }
        public final short l_type$get() {
            return (short) l_type$VH.get(l_type$ptr());
        }
        public final void l_type$set(short value) {
            l_type$VH.set(l_type$ptr(), value);
        }

        public static final VarHandle l_whence$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("l_whence")));
        public static final long l_whence$OFFSET = 22L;
        public final MemorySegment l_whence$ptr() {
            return segment().asSlice(22L);
        }
        public final short l_whence$get() {
            return (short) l_whence$VH.get(l_whence$ptr());
        }
        public final void l_whence$set(short value) {
            l_whence$VH.set(l_whence$ptr(), value);
        }
    }
    public static final class __sFILE extends Struct<__sFILE> {
        protected __sFILE(MemorySegment ms) { super(ms); }
        public static final __sFILE at(MemorySegment ms) { return new __sFILE(ms); }
        public final __sFILE offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_POINTER.withName("_p"),
            C_INT.withName("_r"),
            C_INT.withName("_w"),
            C_SHORT.withName("_flags"),
            C_SHORT.withName("_file"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofStruct(
                C_POINTER.withName("_base"),
                C_INT.withName("_size"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("_bf"),
            C_INT.withName("_lbfsize"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("_cookie"),
            C_POINTER.withName("_close"),
            C_POINTER.withName("_read"),
            C_POINTER.withName("_seek"),
            C_POINTER.withName("_write"),
            MemoryLayout.ofStruct(
                C_POINTER.withName("_base"),
                C_INT.withName("_size"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("_ub"),
            C_POINTER.withName("_extra"),
            C_INT.withName("_ur"),
            MemoryLayout.ofSequence(3, C_CHAR).withName("_ubuf"),
            MemoryLayout.ofSequence(1, C_CHAR).withName("_nbuf"),
            MemoryLayout.ofStruct(
                C_POINTER.withName("_base"),
                C_INT.withName("_size"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("_lb"),
            C_INT.withName("_blksize"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("_offset")
        ).withName("__sFILE");
        public static final __sFILE allocate(NativeScope scope) { return new __sFILE(scope.allocate($LAYOUT)); }
        public static final __sFILE allocate(NativeScope scope, long count) { return new __sFILE(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle _p$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_p")));
        public static final long _p$OFFSET = 0L;
        public final MemorySegment _p$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress _p$get() {
            return (jdk.incubator.foreign.MemoryAddress) _p$VH.get(_p$ptr());
        }
        public final void _p$set(jdk.incubator.foreign.MemoryAddress value) {
            _p$VH.set(_p$ptr(), value);
        }

        public static final VarHandle _r$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_r")));
        public static final long _r$OFFSET = 8L;
        public final MemorySegment _r$ptr() {
            return segment().asSlice(8L);
        }
        public final int _r$get() {
            return (int) _r$VH.get(_r$ptr());
        }
        public final void _r$set(int value) {
            _r$VH.set(_r$ptr(), value);
        }

        public static final VarHandle _w$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_w")));
        public static final long _w$OFFSET = 12L;
        public final MemorySegment _w$ptr() {
            return segment().asSlice(12L);
        }
        public final int _w$get() {
            return (int) _w$VH.get(_w$ptr());
        }
        public final void _w$set(int value) {
            _w$VH.set(_w$ptr(), value);
        }

        public static final VarHandle _flags$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_flags")));
        public static final long _flags$OFFSET = 16L;
        public final MemorySegment _flags$ptr() {
            return segment().asSlice(16L);
        }
        public final short _flags$get() {
            return (short) _flags$VH.get(_flags$ptr());
        }
        public final void _flags$set(short value) {
            _flags$VH.set(_flags$ptr(), value);
        }

        public static final VarHandle _file$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_file")));
        public static final long _file$OFFSET = 18L;
        public final MemorySegment _file$ptr() {
            return segment().asSlice(18L);
        }
        public final short _file$get() {
            return (short) _file$VH.get(_file$ptr());
        }
        public final void _file$set(short value) {
            _file$VH.set(_file$ptr(), value);
        }

        public static final long _bf$OFFSET = 24L;
        public final MemorySegment _bf$ptr() {
            return segment().asSlice(24L);
        }
        public final __sbuf _bf$get() {
            return __sbuf.at(_bf$ptr());
        }
        public final void _bf$set(__sbuf value) {
            __sbuf.at(_bf$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle _lbfsize$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_lbfsize")));
        public static final long _lbfsize$OFFSET = 40L;
        public final MemorySegment _lbfsize$ptr() {
            return segment().asSlice(40L);
        }
        public final int _lbfsize$get() {
            return (int) _lbfsize$VH.get(_lbfsize$ptr());
        }
        public final void _lbfsize$set(int value) {
            _lbfsize$VH.set(_lbfsize$ptr(), value);
        }

        public static final VarHandle _cookie$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_cookie")));
        public static final long _cookie$OFFSET = 48L;
        public final MemorySegment _cookie$ptr() {
            return segment().asSlice(48L);
        }
        public final jdk.incubator.foreign.MemoryAddress _cookie$get() {
            return (jdk.incubator.foreign.MemoryAddress) _cookie$VH.get(_cookie$ptr());
        }
        public final void _cookie$set(jdk.incubator.foreign.MemoryAddress value) {
            _cookie$VH.set(_cookie$ptr(), value);
        }

        public static final VarHandle _close$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_close")));
        public static final long _close$OFFSET = 56L;
        public final MemorySegment _close$ptr() {
            return segment().asSlice(56L);
        }
        public final jdk.incubator.foreign.MemoryAddress _close$get() {
            return (jdk.incubator.foreign.MemoryAddress) _close$VH.get(_close$ptr());
        }
        public final void _close$set(jdk.incubator.foreign.MemoryAddress value) {
            _close$VH.set(_close$ptr(), value);
        }

        public static final VarHandle _read$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_read")));
        public static final long _read$OFFSET = 64L;
        public final MemorySegment _read$ptr() {
            return segment().asSlice(64L);
        }
        public final jdk.incubator.foreign.MemoryAddress _read$get() {
            return (jdk.incubator.foreign.MemoryAddress) _read$VH.get(_read$ptr());
        }
        public final void _read$set(jdk.incubator.foreign.MemoryAddress value) {
            _read$VH.set(_read$ptr(), value);
        }

        public static final VarHandle _seek$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_seek")));
        public static final long _seek$OFFSET = 72L;
        public final MemorySegment _seek$ptr() {
            return segment().asSlice(72L);
        }
        public final jdk.incubator.foreign.MemoryAddress _seek$get() {
            return (jdk.incubator.foreign.MemoryAddress) _seek$VH.get(_seek$ptr());
        }
        public final void _seek$set(jdk.incubator.foreign.MemoryAddress value) {
            _seek$VH.set(_seek$ptr(), value);
        }

        public static final VarHandle _write$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_write")));
        public static final long _write$OFFSET = 80L;
        public final MemorySegment _write$ptr() {
            return segment().asSlice(80L);
        }
        public final jdk.incubator.foreign.MemoryAddress _write$get() {
            return (jdk.incubator.foreign.MemoryAddress) _write$VH.get(_write$ptr());
        }
        public final void _write$set(jdk.incubator.foreign.MemoryAddress value) {
            _write$VH.set(_write$ptr(), value);
        }

        public static final long _ub$OFFSET = 88L;
        public final MemorySegment _ub$ptr() {
            return segment().asSlice(88L);
        }
        public final __sbuf _ub$get() {
            return __sbuf.at(_ub$ptr());
        }
        public final void _ub$set(__sbuf value) {
            __sbuf.at(_ub$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle _extra$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_extra")));
        public static final long _extra$OFFSET = 104L;
        public final MemorySegment _extra$ptr() {
            return segment().asSlice(104L);
        }
        public final jdk.incubator.foreign.MemoryAddress _extra$get() {
            return (jdk.incubator.foreign.MemoryAddress) _extra$VH.get(_extra$ptr());
        }
        public final void _extra$set(jdk.incubator.foreign.MemoryAddress value) {
            _extra$VH.set(_extra$ptr(), value);
        }

        public static final VarHandle _ur$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_ur")));
        public static final long _ur$OFFSET = 112L;
        public final MemorySegment _ur$ptr() {
            return segment().asSlice(112L);
        }
        public final int _ur$get() {
            return (int) _ur$VH.get(_ur$ptr());
        }
        public final void _ur$set(int value) {
            _ur$VH.set(_ur$ptr(), value);
        }

        public static final VarHandle _ubuf$VH = RuntimeHelper.varHandle(byte.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_ubuf")));
        public static final long _ubuf$OFFSET = 116L;
        public final MemorySegment _ubuf$ptr() {
            return segment().asSlice(116L);
        }
        public final byte _ubuf$get(long idx0) {
            return (byte) _ubuf$VH.get(_ubuf$ptr(), idx0);
        }
        public final void _ubuf$set(long idx0, byte value) {
            _ubuf$VH.set(_ubuf$ptr(), idx0, value);
        }

        public static final VarHandle _nbuf$VH = RuntimeHelper.varHandle(byte.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_nbuf")));
        public static final long _nbuf$OFFSET = 119L;
        public final MemorySegment _nbuf$ptr() {
            return segment().asSlice(119L);
        }
        public final byte _nbuf$get(long idx0) {
            return (byte) _nbuf$VH.get(_nbuf$ptr(), idx0);
        }
        public final void _nbuf$set(long idx0, byte value) {
            _nbuf$VH.set(_nbuf$ptr(), idx0, value);
        }

        public static final long _lb$OFFSET = 120L;
        public final MemorySegment _lb$ptr() {
            return segment().asSlice(120L);
        }
        public final __sbuf _lb$get() {
            return __sbuf.at(_lb$ptr());
        }
        public final void _lb$set(__sbuf value) {
            __sbuf.at(_lb$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle _blksize$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_blksize")));
        public static final long _blksize$OFFSET = 136L;
        public final MemorySegment _blksize$ptr() {
            return segment().asSlice(136L);
        }
        public final int _blksize$get() {
            return (int) _blksize$VH.get(_blksize$ptr());
        }
        public final void _blksize$set(int value) {
            _blksize$VH.set(_blksize$ptr(), value);
        }

        public static final VarHandle _offset$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_offset")));
        public static final long _offset$OFFSET = 144L;
        public final MemorySegment _offset$ptr() {
            return segment().asSlice(144L);
        }
        public final long _offset$get() {
            return (long) _offset$VH.get(_offset$ptr());
        }
        public final void _offset$set(long value) {
            _offset$VH.set(_offset$ptr(), value);
        }
    }
    public static final class __sbuf extends Struct<__sbuf> {
        protected __sbuf(MemorySegment ms) { super(ms); }
        public static final __sbuf at(MemorySegment ms) { return new __sbuf(ms); }
        public final __sbuf offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_POINTER.withName("_base"),
            C_INT.withName("_size"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("__sbuf");
        public static final __sbuf allocate(NativeScope scope) { return new __sbuf(scope.allocate($LAYOUT)); }
        public static final __sbuf allocate(NativeScope scope, long count) { return new __sbuf(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle _base$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_base")));
        public static final long _base$OFFSET = 0L;
        public final MemorySegment _base$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress _base$get() {
            return (jdk.incubator.foreign.MemoryAddress) _base$VH.get(_base$ptr());
        }
        public final void _base$set(jdk.incubator.foreign.MemoryAddress value) {
            _base$VH.set(_base$ptr(), value);
        }

        public static final VarHandle _size$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("_size")));
        public static final long _size$OFFSET = 8L;
        public final MemorySegment _size$ptr() {
            return segment().asSlice(8L);
        }
        public final int _size$get() {
            return (int) _size$VH.get(_size$ptr());
        }
        public final void _size$set(int value) {
            _size$VH.set(_size$ptr(), value);
        }
    }
    public static final class sigaction extends Struct<sigaction> {
        protected sigaction(MemorySegment ms) { super(ms); }
        public static final sigaction at(MemorySegment ms) { return new sigaction(ms); }
        public final sigaction offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_POINTER.withName("__sa_handler"),
                C_POINTER.withName("__sa_sigaction")
            ).withName("__sigaction_u"),
            C_INT.withName("sa_mask"),
            C_INT.withName("sa_flags")
        ).withName("sigaction");
        public static final sigaction allocate(NativeScope scope) { return new sigaction(scope.allocate($LAYOUT)); }
        public static final sigaction allocate(NativeScope scope, long count) { return new sigaction(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final long __sigaction_u$OFFSET = 0L;
        public final MemorySegment __sigaction_u$ptr() {
            return segment().asSlice(0L);
        }
        public final __sigaction_u __sigaction_u$get() {
            return __sigaction_u.at(__sigaction_u$ptr());
        }
        public final void __sigaction_u$set(__sigaction_u value) {
            __sigaction_u.at(__sigaction_u$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle sa_mask$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("sa_mask")));
        public static final long sa_mask$OFFSET = 8L;
        public final MemorySegment sa_mask$ptr() {
            return segment().asSlice(8L);
        }
        public final int sa_mask$get() {
            return (int) sa_mask$VH.get(sa_mask$ptr());
        }
        public final void sa_mask$set(int value) {
            sa_mask$VH.set(sa_mask$ptr(), value);
        }

        public static final VarHandle sa_flags$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("sa_flags")));
        public static final long sa_flags$OFFSET = 12L;
        public final MemorySegment sa_flags$ptr() {
            return segment().asSlice(12L);
        }
        public final int sa_flags$get() {
            return (int) sa_flags$VH.get(sa_flags$ptr());
        }
        public final void sa_flags$set(int value) {
            sa_flags$VH.set(sa_flags$ptr(), value);
        }
    }
    public static final class __sigaction_u extends Struct<__sigaction_u> {
        protected __sigaction_u(MemorySegment ms) { super(ms); }
        public static final __sigaction_u at(MemorySegment ms) { return new __sigaction_u(ms); }
        public final __sigaction_u offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofUnion(
            C_POINTER.withName("__sa_handler"),
            C_POINTER.withName("__sa_sigaction")
        ).withName("__sigaction_u");
        public static final __sigaction_u allocate(NativeScope scope) { return new __sigaction_u(scope.allocate($LAYOUT)); }
        public static final __sigaction_u allocate(NativeScope scope, long count) { return new __sigaction_u(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle __sa_handler$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__sa_handler")));
        public static final long __sa_handler$OFFSET = 0L;
        public final MemorySegment __sa_handler$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress __sa_handler$get() {
            return (jdk.incubator.foreign.MemoryAddress) __sa_handler$VH.get(__sa_handler$ptr());
        }
        public final void __sa_handler$set(jdk.incubator.foreign.MemoryAddress value) {
            __sa_handler$VH.set(__sa_handler$ptr(), value);
        }

        public static final VarHandle __sa_sigaction$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__sa_sigaction")));
        public static final long __sa_sigaction$OFFSET = 0L;
        public final MemorySegment __sa_sigaction$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress __sa_sigaction$get() {
            return (jdk.incubator.foreign.MemoryAddress) __sa_sigaction$VH.get(__sa_sigaction$ptr());
        }
        public final void __sa_sigaction$set(jdk.incubator.foreign.MemoryAddress value) {
            __sa_sigaction$VH.set(__sa_sigaction$ptr(), value);
        }
    }
    public static final class __siginfo extends Struct<__siginfo> {
        protected __siginfo(MemorySegment ms) { super(ms); }
        public static final __siginfo at(MemorySegment ms) { return new __siginfo(ms); }
        public final __siginfo offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_INT.withName("si_signo"),
            C_INT.withName("si_errno"),
            C_INT.withName("si_code"),
            C_INT.withName("si_pid"),
            C_INT.withName("si_uid"),
            C_INT.withName("si_status"),
            C_POINTER.withName("si_addr"),
            MemoryLayout.ofUnion(
                C_INT.withName("sival_int"),
                C_POINTER.withName("sival_ptr")
            ).withName("si_value"),
            C_LONG.withName("si_band"),
            MemoryLayout.ofSequence(7, C_LONG).withName("__pad")
        ).withName("__siginfo");
        public static final __siginfo allocate(NativeScope scope) { return new __siginfo(scope.allocate($LAYOUT)); }
        public static final __siginfo allocate(NativeScope scope, long count) { return new __siginfo(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle si_signo$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("si_signo")));
        public static final long si_signo$OFFSET = 0L;
        public final MemorySegment si_signo$ptr() {
            return segment().asSlice(0L);
        }
        public final int si_signo$get() {
            return (int) si_signo$VH.get(si_signo$ptr());
        }
        public final void si_signo$set(int value) {
            si_signo$VH.set(si_signo$ptr(), value);
        }

        public static final VarHandle si_errno$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("si_errno")));
        public static final long si_errno$OFFSET = 4L;
        public final MemorySegment si_errno$ptr() {
            return segment().asSlice(4L);
        }
        public final int si_errno$get() {
            return (int) si_errno$VH.get(si_errno$ptr());
        }
        public final void si_errno$set(int value) {
            si_errno$VH.set(si_errno$ptr(), value);
        }

        public static final VarHandle si_code$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("si_code")));
        public static final long si_code$OFFSET = 8L;
        public final MemorySegment si_code$ptr() {
            return segment().asSlice(8L);
        }
        public final int si_code$get() {
            return (int) si_code$VH.get(si_code$ptr());
        }
        public final void si_code$set(int value) {
            si_code$VH.set(si_code$ptr(), value);
        }

        public static final VarHandle si_pid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("si_pid")));
        public static final long si_pid$OFFSET = 12L;
        public final MemorySegment si_pid$ptr() {
            return segment().asSlice(12L);
        }
        public final int si_pid$get() {
            return (int) si_pid$VH.get(si_pid$ptr());
        }
        public final void si_pid$set(int value) {
            si_pid$VH.set(si_pid$ptr(), value);
        }

        public static final VarHandle si_uid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("si_uid")));
        public static final long si_uid$OFFSET = 16L;
        public final MemorySegment si_uid$ptr() {
            return segment().asSlice(16L);
        }
        public final int si_uid$get() {
            return (int) si_uid$VH.get(si_uid$ptr());
        }
        public final void si_uid$set(int value) {
            si_uid$VH.set(si_uid$ptr(), value);
        }

        public static final VarHandle si_status$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("si_status")));
        public static final long si_status$OFFSET = 20L;
        public final MemorySegment si_status$ptr() {
            return segment().asSlice(20L);
        }
        public final int si_status$get() {
            return (int) si_status$VH.get(si_status$ptr());
        }
        public final void si_status$set(int value) {
            si_status$VH.set(si_status$ptr(), value);
        }

        public static final VarHandle si_addr$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("si_addr")));
        public static final long si_addr$OFFSET = 24L;
        public final MemorySegment si_addr$ptr() {
            return segment().asSlice(24L);
        }
        public final jdk.incubator.foreign.MemoryAddress si_addr$get() {
            return (jdk.incubator.foreign.MemoryAddress) si_addr$VH.get(si_addr$ptr());
        }
        public final void si_addr$set(jdk.incubator.foreign.MemoryAddress value) {
            si_addr$VH.set(si_addr$ptr(), value);
        }

        public static final long si_value$OFFSET = 32L;
        public final MemorySegment si_value$ptr() {
            return segment().asSlice(32L);
        }
        public final sigval si_value$get() {
            return sigval.at(si_value$ptr());
        }
        public final void si_value$set(sigval value) {
            sigval.at(si_value$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle si_band$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("si_band")));
        public static final long si_band$OFFSET = 40L;
        public final MemorySegment si_band$ptr() {
            return segment().asSlice(40L);
        }
        public final long si_band$get() {
            return (long) si_band$VH.get(si_band$ptr());
        }
        public final void si_band$set(long value) {
            si_band$VH.set(si_band$ptr(), value);
        }

        public static final VarHandle __pad$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__pad")));
        public static final long __pad$OFFSET = 48L;
        public final MemorySegment __pad$ptr() {
            return segment().asSlice(48L);
        }
        public final long __pad$get(long idx0) {
            return (long) __pad$VH.get(__pad$ptr(), idx0);
        }
        public final void __pad$set(long idx0, long value) {
            __pad$VH.set(__pad$ptr(), idx0, value);
        }
    }
    public static final class sigval extends Struct<sigval> {
        protected sigval(MemorySegment ms) { super(ms); }
        public static final sigval at(MemorySegment ms) { return new sigval(ms); }
        public final sigval offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofUnion(
            C_INT.withName("sival_int"),
            C_POINTER.withName("sival_ptr")
        ).withName("sigval");
        public static final sigval allocate(NativeScope scope) { return new sigval(scope.allocate($LAYOUT)); }
        public static final sigval allocate(NativeScope scope, long count) { return new sigval(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle sival_int$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("sival_int")));
        public static final long sival_int$OFFSET = 0L;
        public final MemorySegment sival_int$ptr() {
            return segment().asSlice(0L);
        }
        public final int sival_int$get() {
            return (int) sival_int$VH.get(sival_int$ptr());
        }
        public final void sival_int$set(int value) {
            sival_int$VH.set(sival_int$ptr(), value);
        }

        public static final VarHandle sival_ptr$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("sival_ptr")));
        public static final long sival_ptr$OFFSET = 0L;
        public final MemorySegment sival_ptr$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress sival_ptr$get() {
            return (jdk.incubator.foreign.MemoryAddress) sival_ptr$VH.get(sival_ptr$ptr());
        }
        public final void sival_ptr$set(jdk.incubator.foreign.MemoryAddress value) {
            sival_ptr$VH.set(sival_ptr$ptr(), value);
        }
    }
    public static final class timeval extends Struct<timeval> {
        protected timeval(MemorySegment ms) { super(ms); }
        public static final timeval at(MemorySegment ms) { return new timeval(ms); }
        public final timeval offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_INT.withName("tv_usec"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("timeval");
        public static final timeval allocate(NativeScope scope) { return new timeval(scope.allocate($LAYOUT)); }
        public static final timeval allocate(NativeScope scope, long count) { return new timeval(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle tv_sec$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("tv_sec")));
        public static final long tv_sec$OFFSET = 0L;
        public final MemorySegment tv_sec$ptr() {
            return segment().asSlice(0L);
        }
        public final long tv_sec$get() {
            return (long) tv_sec$VH.get(tv_sec$ptr());
        }
        public final void tv_sec$set(long value) {
            tv_sec$VH.set(tv_sec$ptr(), value);
        }

        public static final VarHandle tv_usec$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("tv_usec")));
        public static final long tv_usec$OFFSET = 8L;
        public final MemorySegment tv_usec$ptr() {
            return segment().asSlice(8L);
        }
        public final int tv_usec$get() {
            return (int) tv_usec$VH.get(tv_usec$ptr());
        }
        public final void tv_usec$set(int value) {
            tv_usec$VH.set(tv_usec$ptr(), value);
        }
    }
    public static final class DIR extends Struct<DIR> {
        protected DIR(MemorySegment ms) { super(ms); }
        public static final DIR at(MemorySegment ms) { return new DIR(ms); }
        public final DIR offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_INT.withName("__dd_fd"),
            MemoryLayout.ofPaddingBits(32),
            C_LONG.withName("__dd_loc"),
            C_LONG.withName("__dd_size"),
            C_POINTER.withName("__dd_buf"),
            C_INT.withName("__dd_len"),
            MemoryLayout.ofPaddingBits(32),
            C_LONG.withName("__dd_seek"),
            C_LONG.withName("__padding"),
            C_INT.withName("__dd_flags"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofStruct(
                C_LONG.withName("__sig"),
                MemoryLayout.ofSequence(56, C_CHAR).withName("__opaque")
            ).withName("__dd_lock"),
            C_POINTER.withName("__dd_td")
        );
        public static final DIR allocate(NativeScope scope) { return new DIR(scope.allocate($LAYOUT)); }
        public static final DIR allocate(NativeScope scope, long count) { return new DIR(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle __dd_fd$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__dd_fd")));
        public static final long __dd_fd$OFFSET = 0L;
        public final MemorySegment __dd_fd$ptr() {
            return segment().asSlice(0L);
        }
        public final int __dd_fd$get() {
            return (int) __dd_fd$VH.get(__dd_fd$ptr());
        }
        public final void __dd_fd$set(int value) {
            __dd_fd$VH.set(__dd_fd$ptr(), value);
        }

        public static final VarHandle __dd_loc$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__dd_loc")));
        public static final long __dd_loc$OFFSET = 8L;
        public final MemorySegment __dd_loc$ptr() {
            return segment().asSlice(8L);
        }
        public final long __dd_loc$get() {
            return (long) __dd_loc$VH.get(__dd_loc$ptr());
        }
        public final void __dd_loc$set(long value) {
            __dd_loc$VH.set(__dd_loc$ptr(), value);
        }

        public static final VarHandle __dd_size$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__dd_size")));
        public static final long __dd_size$OFFSET = 16L;
        public final MemorySegment __dd_size$ptr() {
            return segment().asSlice(16L);
        }
        public final long __dd_size$get() {
            return (long) __dd_size$VH.get(__dd_size$ptr());
        }
        public final void __dd_size$set(long value) {
            __dd_size$VH.set(__dd_size$ptr(), value);
        }

        public static final VarHandle __dd_buf$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__dd_buf")));
        public static final long __dd_buf$OFFSET = 24L;
        public final MemorySegment __dd_buf$ptr() {
            return segment().asSlice(24L);
        }
        public final jdk.incubator.foreign.MemoryAddress __dd_buf$get() {
            return (jdk.incubator.foreign.MemoryAddress) __dd_buf$VH.get(__dd_buf$ptr());
        }
        public final void __dd_buf$set(jdk.incubator.foreign.MemoryAddress value) {
            __dd_buf$VH.set(__dd_buf$ptr(), value);
        }

        public static final VarHandle __dd_len$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__dd_len")));
        public static final long __dd_len$OFFSET = 32L;
        public final MemorySegment __dd_len$ptr() {
            return segment().asSlice(32L);
        }
        public final int __dd_len$get() {
            return (int) __dd_len$VH.get(__dd_len$ptr());
        }
        public final void __dd_len$set(int value) {
            __dd_len$VH.set(__dd_len$ptr(), value);
        }

        public static final VarHandle __dd_seek$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__dd_seek")));
        public static final long __dd_seek$OFFSET = 40L;
        public final MemorySegment __dd_seek$ptr() {
            return segment().asSlice(40L);
        }
        public final long __dd_seek$get() {
            return (long) __dd_seek$VH.get(__dd_seek$ptr());
        }
        public final void __dd_seek$set(long value) {
            __dd_seek$VH.set(__dd_seek$ptr(), value);
        }

        public static final VarHandle __padding$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__padding")));
        public static final long __padding$OFFSET = 48L;
        public final MemorySegment __padding$ptr() {
            return segment().asSlice(48L);
        }
        public final long __padding$get() {
            return (long) __padding$VH.get(__padding$ptr());
        }
        public final void __padding$set(long value) {
            __padding$VH.set(__padding$ptr(), value);
        }

        public static final VarHandle __dd_flags$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__dd_flags")));
        public static final long __dd_flags$OFFSET = 56L;
        public final MemorySegment __dd_flags$ptr() {
            return segment().asSlice(56L);
        }
        public final int __dd_flags$get() {
            return (int) __dd_flags$VH.get(__dd_flags$ptr());
        }
        public final void __dd_flags$set(int value) {
            __dd_flags$VH.set(__dd_flags$ptr(), value);
        }

        public static final long __dd_lock$OFFSET = 64L;
        public final MemorySegment __dd_lock$ptr() {
            return segment().asSlice(64L);
        }
        public final _opaque_pthread_mutex_t __dd_lock$get() {
            return _opaque_pthread_mutex_t.at(__dd_lock$ptr());
        }
        public final void __dd_lock$set(_opaque_pthread_mutex_t value) {
            _opaque_pthread_mutex_t.at(__dd_lock$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle __dd_td$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__dd_td")));
        public static final long __dd_td$OFFSET = 128L;
        public final MemorySegment __dd_td$ptr() {
            return segment().asSlice(128L);
        }
        public final jdk.incubator.foreign.MemoryAddress __dd_td$get() {
            return (jdk.incubator.foreign.MemoryAddress) __dd_td$VH.get(__dd_td$ptr());
        }
        public final void __dd_td$set(jdk.incubator.foreign.MemoryAddress value) {
            __dd_td$VH.set(__dd_td$ptr(), value);
        }
    }
    public static final class _opaque_pthread_mutex_t extends Struct<_opaque_pthread_mutex_t> {
        protected _opaque_pthread_mutex_t(MemorySegment ms) { super(ms); }
        public static final _opaque_pthread_mutex_t at(MemorySegment ms) { return new _opaque_pthread_mutex_t(ms); }
        public final _opaque_pthread_mutex_t offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("__sig"),
            MemoryLayout.ofSequence(56, C_CHAR).withName("__opaque")
        ).withName("_opaque_pthread_mutex_t");
        public static final _opaque_pthread_mutex_t allocate(NativeScope scope) { return new _opaque_pthread_mutex_t(scope.allocate($LAYOUT)); }
        public static final _opaque_pthread_mutex_t allocate(NativeScope scope, long count) { return new _opaque_pthread_mutex_t(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle __sig$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__sig")));
        public static final long __sig$OFFSET = 0L;
        public final MemorySegment __sig$ptr() {
            return segment().asSlice(0L);
        }
        public final long __sig$get() {
            return (long) __sig$VH.get(__sig$ptr());
        }
        public final void __sig$set(long value) {
            __sig$VH.set(__sig$ptr(), value);
        }

        public static final VarHandle __opaque$VH = RuntimeHelper.varHandle(byte.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__opaque")));
        public static final long __opaque$OFFSET = 8L;
        public final MemorySegment __opaque$ptr() {
            return segment().asSlice(8L);
        }
        public final byte __opaque$get(long idx0) {
            return (byte) __opaque$VH.get(__opaque$ptr(), idx0);
        }
        public final void __opaque$set(long idx0, byte value) {
            __opaque$VH.set(__opaque$ptr(), idx0, value);
        }
    }
    public static final class dirent extends Struct<dirent> {
        protected dirent(MemorySegment ms) { super(ms); }
        public static final dirent at(MemorySegment ms) { return new dirent(ms); }
        public final dirent offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONGLONG.withName("d_ino"),
            C_LONGLONG.withName("d_seekoff"),
            C_SHORT.withName("d_reclen"),
            C_SHORT.withName("d_namlen"),
            C_CHAR.withName("d_type"),
            MemoryLayout.ofSequence(1024, C_CHAR).withName("d_name"),
            MemoryLayout.ofPaddingBits(24)
        ).withName("dirent");
        public static final dirent allocate(NativeScope scope) { return new dirent(scope.allocate($LAYOUT)); }
        public static final dirent allocate(NativeScope scope, long count) { return new dirent(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle d_ino$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("d_ino")));
        public static final long d_ino$OFFSET = 0L;
        public final MemorySegment d_ino$ptr() {
            return segment().asSlice(0L);
        }
        public final long d_ino$get() {
            return (long) d_ino$VH.get(d_ino$ptr());
        }
        public final void d_ino$set(long value) {
            d_ino$VH.set(d_ino$ptr(), value);
        }

        public static final VarHandle d_seekoff$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("d_seekoff")));
        public static final long d_seekoff$OFFSET = 8L;
        public final MemorySegment d_seekoff$ptr() {
            return segment().asSlice(8L);
        }
        public final long d_seekoff$get() {
            return (long) d_seekoff$VH.get(d_seekoff$ptr());
        }
        public final void d_seekoff$set(long value) {
            d_seekoff$VH.set(d_seekoff$ptr(), value);
        }

        public static final VarHandle d_reclen$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("d_reclen")));
        public static final long d_reclen$OFFSET = 16L;
        public final MemorySegment d_reclen$ptr() {
            return segment().asSlice(16L);
        }
        public final short d_reclen$get() {
            return (short) d_reclen$VH.get(d_reclen$ptr());
        }
        public final void d_reclen$set(short value) {
            d_reclen$VH.set(d_reclen$ptr(), value);
        }

        public static final VarHandle d_namlen$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("d_namlen")));
        public static final long d_namlen$OFFSET = 18L;
        public final MemorySegment d_namlen$ptr() {
            return segment().asSlice(18L);
        }
        public final short d_namlen$get() {
            return (short) d_namlen$VH.get(d_namlen$ptr());
        }
        public final void d_namlen$set(short value) {
            d_namlen$VH.set(d_namlen$ptr(), value);
        }

        public static final VarHandle d_type$VH = RuntimeHelper.varHandle(byte.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("d_type")));
        public static final long d_type$OFFSET = 20L;
        public final MemorySegment d_type$ptr() {
            return segment().asSlice(20L);
        }
        public final byte d_type$get() {
            return (byte) d_type$VH.get(d_type$ptr());
        }
        public final void d_type$set(byte value) {
            d_type$VH.set(d_type$ptr(), value);
        }

        public static final VarHandle d_name$VH = RuntimeHelper.varHandle(byte.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("d_name")));
        public static final long d_name$OFFSET = 21L;
        public final MemorySegment d_name$ptr() {
            return segment().asSlice(21L);
        }
        public final byte d_name$get(long idx0) {
            return (byte) d_name$VH.get(d_name$ptr(), idx0);
        }
        public final void d_name$set(long idx0, byte value) {
            d_name$VH.set(d_name$ptr(), idx0, value);
        }
    }
    public static final class passwd extends Struct<passwd> {
        protected passwd(MemorySegment ms) { super(ms); }
        public static final passwd at(MemorySegment ms) { return new passwd(ms); }
        public final passwd offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_POINTER.withName("pw_name"),
            C_POINTER.withName("pw_passwd"),
            C_INT.withName("pw_uid"),
            C_INT.withName("pw_gid"),
            C_LONG.withName("pw_change"),
            C_POINTER.withName("pw_class"),
            C_POINTER.withName("pw_gecos"),
            C_POINTER.withName("pw_dir"),
            C_POINTER.withName("pw_shell"),
            C_LONG.withName("pw_expire")
        ).withName("passwd");
        public static final passwd allocate(NativeScope scope) { return new passwd(scope.allocate($LAYOUT)); }
        public static final passwd allocate(NativeScope scope, long count) { return new passwd(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle pw_name$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_name")));
        public static final long pw_name$OFFSET = 0L;
        public final MemorySegment pw_name$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress pw_name$get() {
            return (jdk.incubator.foreign.MemoryAddress) pw_name$VH.get(pw_name$ptr());
        }
        public final void pw_name$set(jdk.incubator.foreign.MemoryAddress value) {
            pw_name$VH.set(pw_name$ptr(), value);
        }

        public static final VarHandle pw_passwd$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_passwd")));
        public static final long pw_passwd$OFFSET = 8L;
        public final MemorySegment pw_passwd$ptr() {
            return segment().asSlice(8L);
        }
        public final jdk.incubator.foreign.MemoryAddress pw_passwd$get() {
            return (jdk.incubator.foreign.MemoryAddress) pw_passwd$VH.get(pw_passwd$ptr());
        }
        public final void pw_passwd$set(jdk.incubator.foreign.MemoryAddress value) {
            pw_passwd$VH.set(pw_passwd$ptr(), value);
        }

        public static final VarHandle pw_uid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_uid")));
        public static final long pw_uid$OFFSET = 16L;
        public final MemorySegment pw_uid$ptr() {
            return segment().asSlice(16L);
        }
        public final int pw_uid$get() {
            return (int) pw_uid$VH.get(pw_uid$ptr());
        }
        public final void pw_uid$set(int value) {
            pw_uid$VH.set(pw_uid$ptr(), value);
        }

        public static final VarHandle pw_gid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_gid")));
        public static final long pw_gid$OFFSET = 20L;
        public final MemorySegment pw_gid$ptr() {
            return segment().asSlice(20L);
        }
        public final int pw_gid$get() {
            return (int) pw_gid$VH.get(pw_gid$ptr());
        }
        public final void pw_gid$set(int value) {
            pw_gid$VH.set(pw_gid$ptr(), value);
        }

        public static final VarHandle pw_change$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_change")));
        public static final long pw_change$OFFSET = 24L;
        public final MemorySegment pw_change$ptr() {
            return segment().asSlice(24L);
        }
        public final long pw_change$get() {
            return (long) pw_change$VH.get(pw_change$ptr());
        }
        public final void pw_change$set(long value) {
            pw_change$VH.set(pw_change$ptr(), value);
        }

        public static final VarHandle pw_class$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_class")));
        public static final long pw_class$OFFSET = 32L;
        public final MemorySegment pw_class$ptr() {
            return segment().asSlice(32L);
        }
        public final jdk.incubator.foreign.MemoryAddress pw_class$get() {
            return (jdk.incubator.foreign.MemoryAddress) pw_class$VH.get(pw_class$ptr());
        }
        public final void pw_class$set(jdk.incubator.foreign.MemoryAddress value) {
            pw_class$VH.set(pw_class$ptr(), value);
        }

        public static final VarHandle pw_gecos$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_gecos")));
        public static final long pw_gecos$OFFSET = 40L;
        public final MemorySegment pw_gecos$ptr() {
            return segment().asSlice(40L);
        }
        public final jdk.incubator.foreign.MemoryAddress pw_gecos$get() {
            return (jdk.incubator.foreign.MemoryAddress) pw_gecos$VH.get(pw_gecos$ptr());
        }
        public final void pw_gecos$set(jdk.incubator.foreign.MemoryAddress value) {
            pw_gecos$VH.set(pw_gecos$ptr(), value);
        }

        public static final VarHandle pw_dir$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_dir")));
        public static final long pw_dir$OFFSET = 48L;
        public final MemorySegment pw_dir$ptr() {
            return segment().asSlice(48L);
        }
        public final jdk.incubator.foreign.MemoryAddress pw_dir$get() {
            return (jdk.incubator.foreign.MemoryAddress) pw_dir$VH.get(pw_dir$ptr());
        }
        public final void pw_dir$set(jdk.incubator.foreign.MemoryAddress value) {
            pw_dir$VH.set(pw_dir$ptr(), value);
        }

        public static final VarHandle pw_shell$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_shell")));
        public static final long pw_shell$OFFSET = 56L;
        public final MemorySegment pw_shell$ptr() {
            return segment().asSlice(56L);
        }
        public final jdk.incubator.foreign.MemoryAddress pw_shell$get() {
            return (jdk.incubator.foreign.MemoryAddress) pw_shell$VH.get(pw_shell$ptr());
        }
        public final void pw_shell$set(jdk.incubator.foreign.MemoryAddress value) {
            pw_shell$VH.set(pw_shell$ptr(), value);
        }

        public static final VarHandle pw_expire$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("pw_expire")));
        public static final long pw_expire$OFFSET = 64L;
        public final MemorySegment pw_expire$ptr() {
            return segment().asSlice(64L);
        }
        public final long pw_expire$get() {
            return (long) pw_expire$VH.get(pw_expire$ptr());
        }
        public final void pw_expire$set(long value) {
            pw_expire$VH.set(pw_expire$ptr(), value);
        }
    }
    public static final class group extends Struct<group> {
        protected group(MemorySegment ms) { super(ms); }
        public static final group at(MemorySegment ms) { return new group(ms); }
        public final group offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_POINTER.withName("gr_name"),
            C_POINTER.withName("gr_passwd"),
            C_INT.withName("gr_gid"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("gr_mem")
        ).withName("group");
        public static final group allocate(NativeScope scope) { return new group(scope.allocate($LAYOUT)); }
        public static final group allocate(NativeScope scope, long count) { return new group(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle gr_name$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("gr_name")));
        public static final long gr_name$OFFSET = 0L;
        public final MemorySegment gr_name$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress gr_name$get() {
            return (jdk.incubator.foreign.MemoryAddress) gr_name$VH.get(gr_name$ptr());
        }
        public final void gr_name$set(jdk.incubator.foreign.MemoryAddress value) {
            gr_name$VH.set(gr_name$ptr(), value);
        }

        public static final VarHandle gr_passwd$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("gr_passwd")));
        public static final long gr_passwd$OFFSET = 8L;
        public final MemorySegment gr_passwd$ptr() {
            return segment().asSlice(8L);
        }
        public final jdk.incubator.foreign.MemoryAddress gr_passwd$get() {
            return (jdk.incubator.foreign.MemoryAddress) gr_passwd$VH.get(gr_passwd$ptr());
        }
        public final void gr_passwd$set(jdk.incubator.foreign.MemoryAddress value) {
            gr_passwd$VH.set(gr_passwd$ptr(), value);
        }

        public static final VarHandle gr_gid$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("gr_gid")));
        public static final long gr_gid$OFFSET = 16L;
        public final MemorySegment gr_gid$ptr() {
            return segment().asSlice(16L);
        }
        public final int gr_gid$get() {
            return (int) gr_gid$VH.get(gr_gid$ptr());
        }
        public final void gr_gid$set(int value) {
            gr_gid$VH.set(gr_gid$ptr(), value);
        }

        public static final VarHandle gr_mem$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("gr_mem")));
        public static final long gr_mem$OFFSET = 24L;
        public final MemorySegment gr_mem$ptr() {
            return segment().asSlice(24L);
        }
        public final jdk.incubator.foreign.MemoryAddress gr_mem$get() {
            return (jdk.incubator.foreign.MemoryAddress) gr_mem$VH.get(gr_mem$ptr());
        }
        public final void gr_mem$set(jdk.incubator.foreign.MemoryAddress value) {
            gr_mem$VH.set(gr_mem$ptr(), value);
        }
    }
    public static final class statvfs extends Struct<statvfs> {
        protected statvfs(MemorySegment ms) { super(ms); }
        public static final statvfs at(MemorySegment ms) { return new statvfs(ms); }
        public final statvfs offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("f_bsize"),
            C_LONG.withName("f_frsize"),
            C_INT.withName("f_blocks"),
            C_INT.withName("f_bfree"),
            C_INT.withName("f_bavail"),
            C_INT.withName("f_files"),
            C_INT.withName("f_ffree"),
            C_INT.withName("f_favail"),
            C_LONG.withName("f_fsid"),
            C_LONG.withName("f_flag"),
            C_LONG.withName("f_namemax")
        ).withName("statvfs");
        public static final statvfs allocate(NativeScope scope) { return new statvfs(scope.allocate($LAYOUT)); }
        public static final statvfs allocate(NativeScope scope, long count) { return new statvfs(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle f_bsize$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_bsize")));
        public static final long f_bsize$OFFSET = 0L;
        public final MemorySegment f_bsize$ptr() {
            return segment().asSlice(0L);
        }
        public final long f_bsize$get() {
            return (long) f_bsize$VH.get(f_bsize$ptr());
        }
        public final void f_bsize$set(long value) {
            f_bsize$VH.set(f_bsize$ptr(), value);
        }

        public static final VarHandle f_frsize$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_frsize")));
        public static final long f_frsize$OFFSET = 8L;
        public final MemorySegment f_frsize$ptr() {
            return segment().asSlice(8L);
        }
        public final long f_frsize$get() {
            return (long) f_frsize$VH.get(f_frsize$ptr());
        }
        public final void f_frsize$set(long value) {
            f_frsize$VH.set(f_frsize$ptr(), value);
        }

        public static final VarHandle f_blocks$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_blocks")));
        public static final long f_blocks$OFFSET = 16L;
        public final MemorySegment f_blocks$ptr() {
            return segment().asSlice(16L);
        }
        public final int f_blocks$get() {
            return (int) f_blocks$VH.get(f_blocks$ptr());
        }
        public final void f_blocks$set(int value) {
            f_blocks$VH.set(f_blocks$ptr(), value);
        }

        public static final VarHandle f_bfree$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_bfree")));
        public static final long f_bfree$OFFSET = 20L;
        public final MemorySegment f_bfree$ptr() {
            return segment().asSlice(20L);
        }
        public final int f_bfree$get() {
            return (int) f_bfree$VH.get(f_bfree$ptr());
        }
        public final void f_bfree$set(int value) {
            f_bfree$VH.set(f_bfree$ptr(), value);
        }

        public static final VarHandle f_bavail$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_bavail")));
        public static final long f_bavail$OFFSET = 24L;
        public final MemorySegment f_bavail$ptr() {
            return segment().asSlice(24L);
        }
        public final int f_bavail$get() {
            return (int) f_bavail$VH.get(f_bavail$ptr());
        }
        public final void f_bavail$set(int value) {
            f_bavail$VH.set(f_bavail$ptr(), value);
        }

        public static final VarHandle f_files$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_files")));
        public static final long f_files$OFFSET = 28L;
        public final MemorySegment f_files$ptr() {
            return segment().asSlice(28L);
        }
        public final int f_files$get() {
            return (int) f_files$VH.get(f_files$ptr());
        }
        public final void f_files$set(int value) {
            f_files$VH.set(f_files$ptr(), value);
        }

        public static final VarHandle f_ffree$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_ffree")));
        public static final long f_ffree$OFFSET = 32L;
        public final MemorySegment f_ffree$ptr() {
            return segment().asSlice(32L);
        }
        public final int f_ffree$get() {
            return (int) f_ffree$VH.get(f_ffree$ptr());
        }
        public final void f_ffree$set(int value) {
            f_ffree$VH.set(f_ffree$ptr(), value);
        }

        public static final VarHandle f_favail$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_favail")));
        public static final long f_favail$OFFSET = 36L;
        public final MemorySegment f_favail$ptr() {
            return segment().asSlice(36L);
        }
        public final int f_favail$get() {
            return (int) f_favail$VH.get(f_favail$ptr());
        }
        public final void f_favail$set(int value) {
            f_favail$VH.set(f_favail$ptr(), value);
        }

        public static final VarHandle f_fsid$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_fsid")));
        public static final long f_fsid$OFFSET = 40L;
        public final MemorySegment f_fsid$ptr() {
            return segment().asSlice(40L);
        }
        public final long f_fsid$get() {
            return (long) f_fsid$VH.get(f_fsid$ptr());
        }
        public final void f_fsid$set(long value) {
            f_fsid$VH.set(f_fsid$ptr(), value);
        }

        public static final VarHandle f_flag$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_flag")));
        public static final long f_flag$OFFSET = 48L;
        public final MemorySegment f_flag$ptr() {
            return segment().asSlice(48L);
        }
        public final long f_flag$get() {
            return (long) f_flag$VH.get(f_flag$ptr());
        }
        public final void f_flag$set(long value) {
            f_flag$VH.set(f_flag$ptr(), value);
        }

        public static final VarHandle f_namemax$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_namemax")));
        public static final long f_namemax$OFFSET = 56L;
        public final MemorySegment f_namemax$ptr() {
            return segment().asSlice(56L);
        }
        public final long f_namemax$get() {
            return (long) f_namemax$VH.get(f_namemax$ptr());
        }
        public final void f_namemax$set(long value) {
            f_namemax$VH.set(f_namemax$ptr(), value);
        }
    }
    public static final class statfs extends Struct<statfs> {
        protected statfs(MemorySegment ms) { super(ms); }
        public static final statfs at(MemorySegment ms) { return new statfs(ms); }
        public final statfs offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_INT.withName("f_bsize"),
            C_INT.withName("f_iosize"),
            C_LONGLONG.withName("f_blocks"),
            C_LONGLONG.withName("f_bfree"),
            C_LONGLONG.withName("f_bavail"),
            C_LONGLONG.withName("f_files"),
            C_LONGLONG.withName("f_ffree"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_INT).withName("val")
            ).withName("f_fsid"),
            C_INT.withName("f_owner"),
            C_INT.withName("f_type"),
            C_INT.withName("f_flags"),
            C_INT.withName("f_fssubtype"),
            MemoryLayout.ofSequence(16, C_CHAR).withName("f_fstypename"),
            MemoryLayout.ofSequence(1024, C_CHAR).withName("f_mntonname"),
            MemoryLayout.ofSequence(1024, C_CHAR).withName("f_mntfromname"),
            C_INT.withName("f_flags_ext"),
            MemoryLayout.ofSequence(7, C_INT).withName("f_reserved")
        ).withName("statfs");
        public static final statfs allocate(NativeScope scope) { return new statfs(scope.allocate($LAYOUT)); }
        public static final statfs allocate(NativeScope scope, long count) { return new statfs(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle f_bsize$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_bsize")));
        public static final long f_bsize$OFFSET = 0L;
        public final MemorySegment f_bsize$ptr() {
            return segment().asSlice(0L);
        }
        public final int f_bsize$get() {
            return (int) f_bsize$VH.get(f_bsize$ptr());
        }
        public final void f_bsize$set(int value) {
            f_bsize$VH.set(f_bsize$ptr(), value);
        }

        public static final VarHandle f_iosize$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_iosize")));
        public static final long f_iosize$OFFSET = 4L;
        public final MemorySegment f_iosize$ptr() {
            return segment().asSlice(4L);
        }
        public final int f_iosize$get() {
            return (int) f_iosize$VH.get(f_iosize$ptr());
        }
        public final void f_iosize$set(int value) {
            f_iosize$VH.set(f_iosize$ptr(), value);
        }

        public static final VarHandle f_blocks$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_blocks")));
        public static final long f_blocks$OFFSET = 8L;
        public final MemorySegment f_blocks$ptr() {
            return segment().asSlice(8L);
        }
        public final long f_blocks$get() {
            return (long) f_blocks$VH.get(f_blocks$ptr());
        }
        public final void f_blocks$set(long value) {
            f_blocks$VH.set(f_blocks$ptr(), value);
        }

        public static final VarHandle f_bfree$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_bfree")));
        public static final long f_bfree$OFFSET = 16L;
        public final MemorySegment f_bfree$ptr() {
            return segment().asSlice(16L);
        }
        public final long f_bfree$get() {
            return (long) f_bfree$VH.get(f_bfree$ptr());
        }
        public final void f_bfree$set(long value) {
            f_bfree$VH.set(f_bfree$ptr(), value);
        }

        public static final VarHandle f_bavail$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_bavail")));
        public static final long f_bavail$OFFSET = 24L;
        public final MemorySegment f_bavail$ptr() {
            return segment().asSlice(24L);
        }
        public final long f_bavail$get() {
            return (long) f_bavail$VH.get(f_bavail$ptr());
        }
        public final void f_bavail$set(long value) {
            f_bavail$VH.set(f_bavail$ptr(), value);
        }

        public static final VarHandle f_files$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_files")));
        public static final long f_files$OFFSET = 32L;
        public final MemorySegment f_files$ptr() {
            return segment().asSlice(32L);
        }
        public final long f_files$get() {
            return (long) f_files$VH.get(f_files$ptr());
        }
        public final void f_files$set(long value) {
            f_files$VH.set(f_files$ptr(), value);
        }

        public static final VarHandle f_ffree$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_ffree")));
        public static final long f_ffree$OFFSET = 40L;
        public final MemorySegment f_ffree$ptr() {
            return segment().asSlice(40L);
        }
        public final long f_ffree$get() {
            return (long) f_ffree$VH.get(f_ffree$ptr());
        }
        public final void f_ffree$set(long value) {
            f_ffree$VH.set(f_ffree$ptr(), value);
        }

        public static final long f_fsid$OFFSET = 48L;
        public final MemorySegment f_fsid$ptr() {
            return segment().asSlice(48L);
        }
        public final fsid f_fsid$get() {
            return fsid.at(f_fsid$ptr());
        }
        public final void f_fsid$set(fsid value) {
            fsid.at(f_fsid$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle f_owner$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_owner")));
        public static final long f_owner$OFFSET = 56L;
        public final MemorySegment f_owner$ptr() {
            return segment().asSlice(56L);
        }
        public final int f_owner$get() {
            return (int) f_owner$VH.get(f_owner$ptr());
        }
        public final void f_owner$set(int value) {
            f_owner$VH.set(f_owner$ptr(), value);
        }

        public static final VarHandle f_type$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_type")));
        public static final long f_type$OFFSET = 60L;
        public final MemorySegment f_type$ptr() {
            return segment().asSlice(60L);
        }
        public final int f_type$get() {
            return (int) f_type$VH.get(f_type$ptr());
        }
        public final void f_type$set(int value) {
            f_type$VH.set(f_type$ptr(), value);
        }

        public static final VarHandle f_flags$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_flags")));
        public static final long f_flags$OFFSET = 64L;
        public final MemorySegment f_flags$ptr() {
            return segment().asSlice(64L);
        }
        public final int f_flags$get() {
            return (int) f_flags$VH.get(f_flags$ptr());
        }
        public final void f_flags$set(int value) {
            f_flags$VH.set(f_flags$ptr(), value);
        }

        public static final VarHandle f_fssubtype$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_fssubtype")));
        public static final long f_fssubtype$OFFSET = 68L;
        public final MemorySegment f_fssubtype$ptr() {
            return segment().asSlice(68L);
        }
        public final int f_fssubtype$get() {
            return (int) f_fssubtype$VH.get(f_fssubtype$ptr());
        }
        public final void f_fssubtype$set(int value) {
            f_fssubtype$VH.set(f_fssubtype$ptr(), value);
        }

        public static final VarHandle f_fstypename$VH = RuntimeHelper.varHandle(byte.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_fstypename")));
        public static final long f_fstypename$OFFSET = 72L;
        public final MemorySegment f_fstypename$ptr() {
            return segment().asSlice(72L);
        }
        public final byte f_fstypename$get(long idx0) {
            return (byte) f_fstypename$VH.get(f_fstypename$ptr(), idx0);
        }
        public final void f_fstypename$set(long idx0, byte value) {
            f_fstypename$VH.set(f_fstypename$ptr(), idx0, value);
        }

        public static final VarHandle f_mntonname$VH = RuntimeHelper.varHandle(byte.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_mntonname")));
        public static final long f_mntonname$OFFSET = 88L;
        public final MemorySegment f_mntonname$ptr() {
            return segment().asSlice(88L);
        }
        public final byte f_mntonname$get(long idx0) {
            return (byte) f_mntonname$VH.get(f_mntonname$ptr(), idx0);
        }
        public final void f_mntonname$set(long idx0, byte value) {
            f_mntonname$VH.set(f_mntonname$ptr(), idx0, value);
        }

        public static final VarHandle f_mntfromname$VH = RuntimeHelper.varHandle(byte.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_mntfromname")));
        public static final long f_mntfromname$OFFSET = 1112L;
        public final MemorySegment f_mntfromname$ptr() {
            return segment().asSlice(1112L);
        }
        public final byte f_mntfromname$get(long idx0) {
            return (byte) f_mntfromname$VH.get(f_mntfromname$ptr(), idx0);
        }
        public final void f_mntfromname$set(long idx0, byte value) {
            f_mntfromname$VH.set(f_mntfromname$ptr(), idx0, value);
        }

        public static final VarHandle f_flags_ext$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_flags_ext")));
        public static final long f_flags_ext$OFFSET = 2136L;
        public final MemorySegment f_flags_ext$ptr() {
            return segment().asSlice(2136L);
        }
        public final int f_flags_ext$get() {
            return (int) f_flags_ext$VH.get(f_flags_ext$ptr());
        }
        public final void f_flags_ext$set(int value) {
            f_flags_ext$VH.set(f_flags_ext$ptr(), value);
        }

        public static final VarHandle f_reserved$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("f_reserved")));
        public static final long f_reserved$OFFSET = 2140L;
        public final MemorySegment f_reserved$ptr() {
            return segment().asSlice(2140L);
        }
        public final int f_reserved$get(long idx0) {
            return (int) f_reserved$VH.get(f_reserved$ptr(), idx0);
        }
        public final void f_reserved$set(long idx0, int value) {
            f_reserved$VH.set(f_reserved$ptr(), idx0, value);
        }
    }
    public static final class fsid extends Struct<fsid> {
        protected fsid(MemorySegment ms) { super(ms); }
        public static final fsid at(MemorySegment ms) { return new fsid(ms); }
        public final fsid offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_INT).withName("val")
        ).withName("fsid");
        public static final fsid allocate(NativeScope scope) { return new fsid(scope.allocate($LAYOUT)); }
        public static final fsid allocate(NativeScope scope, long count) { return new fsid(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle val$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("val")));
        public static final long val$OFFSET = 0L;
        public final MemorySegment val$ptr() {
            return segment().asSlice(0L);
        }
        public final int val$get(long idx0) {
            return (int) val$VH.get(val$ptr(), idx0);
        }
        public final void val$set(long idx0, int value) {
            val$VH.set(val$ptr(), idx0, value);
        }
    }
    public static final class kevent extends Struct<kevent> {
        protected kevent(MemorySegment ms) { super(ms); }
        public static final kevent at(MemorySegment ms) { return new kevent(ms); }
        public final kevent offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("ident"),
            C_SHORT.withName("filter"),
            C_SHORT.withName("flags"),
            C_INT.withName("fflags"),
            C_LONG.withName("data"),
            C_POINTER.withName("udata")
        ).withName("kevent");
        public static final kevent allocate(NativeScope scope) { return new kevent(scope.allocate($LAYOUT)); }
        public static final kevent allocate(NativeScope scope, long count) { return new kevent(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle ident$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("ident")));
        public static final long ident$OFFSET = 0L;
        public final MemorySegment ident$ptr() {
            return segment().asSlice(0L);
        }
        public final long ident$get() {
            return (long) ident$VH.get(ident$ptr());
        }
        public final void ident$set(long value) {
            ident$VH.set(ident$ptr(), value);
        }

        public static final VarHandle filter$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("filter")));
        public static final long filter$OFFSET = 8L;
        public final MemorySegment filter$ptr() {
            return segment().asSlice(8L);
        }
        public final short filter$get() {
            return (short) filter$VH.get(filter$ptr());
        }
        public final void filter$set(short value) {
            filter$VH.set(filter$ptr(), value);
        }

        public static final VarHandle flags$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("flags")));
        public static final long flags$OFFSET = 10L;
        public final MemorySegment flags$ptr() {
            return segment().asSlice(10L);
        }
        public final short flags$get() {
            return (short) flags$VH.get(flags$ptr());
        }
        public final void flags$set(short value) {
            flags$VH.set(flags$ptr(), value);
        }

        public static final VarHandle fflags$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("fflags")));
        public static final long fflags$OFFSET = 12L;
        public final MemorySegment fflags$ptr() {
            return segment().asSlice(12L);
        }
        public final int fflags$get() {
            return (int) fflags$VH.get(fflags$ptr());
        }
        public final void fflags$set(int value) {
            fflags$VH.set(fflags$ptr(), value);
        }

        public static final VarHandle data$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("data")));
        public static final long data$OFFSET = 16L;
        public final MemorySegment data$ptr() {
            return segment().asSlice(16L);
        }
        public final long data$get() {
            return (long) data$VH.get(data$ptr());
        }
        public final void data$set(long value) {
            data$VH.set(data$ptr(), value);
        }

        public static final VarHandle udata$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("udata")));
        public static final long udata$OFFSET = 24L;
        public final MemorySegment udata$ptr() {
            return segment().asSlice(24L);
        }
        public final jdk.incubator.foreign.MemoryAddress udata$get() {
            return (jdk.incubator.foreign.MemoryAddress) udata$VH.get(udata$ptr());
        }
        public final void udata$set(jdk.incubator.foreign.MemoryAddress value) {
            udata$VH.set(udata$ptr(), value);
        }
    }
    public static final class _opaque_pthread_t extends Struct<_opaque_pthread_t> {
        protected _opaque_pthread_t(MemorySegment ms) { super(ms); }
        public static final _opaque_pthread_t at(MemorySegment ms) { return new _opaque_pthread_t(ms); }
        public final _opaque_pthread_t offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("__sig"),
            C_POINTER.withName("__cleanup_stack"),
            MemoryLayout.ofSequence(8176, C_CHAR).withName("__opaque")
        ).withName("_opaque_pthread_t");
        public static final _opaque_pthread_t allocate(NativeScope scope) { return new _opaque_pthread_t(scope.allocate($LAYOUT)); }
        public static final _opaque_pthread_t allocate(NativeScope scope, long count) { return new _opaque_pthread_t(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle __sig$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__sig")));
        public static final long __sig$OFFSET = 0L;
        public final MemorySegment __sig$ptr() {
            return segment().asSlice(0L);
        }
        public final long __sig$get() {
            return (long) __sig$VH.get(__sig$ptr());
        }
        public final void __sig$set(long value) {
            __sig$VH.set(__sig$ptr(), value);
        }

        public static final VarHandle __cleanup_stack$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__cleanup_stack")));
        public static final long __cleanup_stack$OFFSET = 8L;
        public final MemorySegment __cleanup_stack$ptr() {
            return segment().asSlice(8L);
        }
        public final jdk.incubator.foreign.MemoryAddress __cleanup_stack$get() {
            return (jdk.incubator.foreign.MemoryAddress) __cleanup_stack$VH.get(__cleanup_stack$ptr());
        }
        public final void __cleanup_stack$set(jdk.incubator.foreign.MemoryAddress value) {
            __cleanup_stack$VH.set(__cleanup_stack$ptr(), value);
        }

        public static final VarHandle __opaque$VH = RuntimeHelper.varHandle(byte.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__opaque")));
        public static final long __opaque$OFFSET = 16L;
        public final MemorySegment __opaque$ptr() {
            return segment().asSlice(16L);
        }
        public final byte __opaque$get(long idx0) {
            return (byte) __opaque$VH.get(__opaque$ptr(), idx0);
        }
        public final void __opaque$set(long idx0, byte value) {
            __opaque$VH.set(__opaque$ptr(), idx0, value);
        }
    }
    public static final class __darwin_pthread_handler_rec extends Struct<__darwin_pthread_handler_rec> {
        protected __darwin_pthread_handler_rec(MemorySegment ms) { super(ms); }
        public static final __darwin_pthread_handler_rec at(MemorySegment ms) { return new __darwin_pthread_handler_rec(ms); }
        public final __darwin_pthread_handler_rec offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_POINTER.withName("__routine"),
            C_POINTER.withName("__arg"),
            C_POINTER.withName("__next")
        ).withName("__darwin_pthread_handler_rec");
        public static final __darwin_pthread_handler_rec allocate(NativeScope scope) { return new __darwin_pthread_handler_rec(scope.allocate($LAYOUT)); }
        public static final __darwin_pthread_handler_rec allocate(NativeScope scope, long count) { return new __darwin_pthread_handler_rec(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle __routine$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__routine")));
        public static final long __routine$OFFSET = 0L;
        public final MemorySegment __routine$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress __routine$get() {
            return (jdk.incubator.foreign.MemoryAddress) __routine$VH.get(__routine$ptr());
        }
        public final void __routine$set(jdk.incubator.foreign.MemoryAddress value) {
            __routine$VH.set(__routine$ptr(), value);
        }

        public static final VarHandle __arg$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__arg")));
        public static final long __arg$OFFSET = 8L;
        public final MemorySegment __arg$ptr() {
            return segment().asSlice(8L);
        }
        public final jdk.incubator.foreign.MemoryAddress __arg$get() {
            return (jdk.incubator.foreign.MemoryAddress) __arg$VH.get(__arg$ptr());
        }
        public final void __arg$set(jdk.incubator.foreign.MemoryAddress value) {
            __arg$VH.set(__arg$ptr(), value);
        }

        public static final VarHandle __next$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("__next")));
        public static final long __next$OFFSET = 16L;
        public final MemorySegment __next$ptr() {
            return segment().asSlice(16L);
        }
        public final jdk.incubator.foreign.MemoryAddress __next$get() {
            return (jdk.incubator.foreign.MemoryAddress) __next$VH.get(__next$ptr());
        }
        public final void __next$set(jdk.incubator.foreign.MemoryAddress value) {
            __next$VH.set(__next$ptr(), value);
        }
    }
    public static final class pollfd extends Struct<pollfd> {
        protected pollfd(MemorySegment ms) { super(ms); }
        public static final pollfd at(MemorySegment ms) { return new pollfd(ms); }
        public final pollfd offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_INT.withName("fd"),
            C_SHORT.withName("events"),
            C_SHORT.withName("revents")
        ).withName("pollfd");
        public static final pollfd allocate(NativeScope scope) { return new pollfd(scope.allocate($LAYOUT)); }
        public static final pollfd allocate(NativeScope scope, long count) { return new pollfd(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle fd$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("fd")));
        public static final long fd$OFFSET = 0L;
        public final MemorySegment fd$ptr() {
            return segment().asSlice(0L);
        }
        public final int fd$get() {
            return (int) fd$VH.get(fd$ptr());
        }
        public final void fd$set(int value) {
            fd$VH.set(fd$ptr(), value);
        }

        public static final VarHandle events$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("events")));
        public static final long events$OFFSET = 4L;
        public final MemorySegment events$ptr() {
            return segment().asSlice(4L);
        }
        public final short events$get() {
            return (short) events$VH.get(events$ptr());
        }
        public final void events$set(short value) {
            events$VH.set(events$ptr(), value);
        }

        public static final VarHandle revents$VH = RuntimeHelper.varHandle(short.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("revents")));
        public static final long revents$OFFSET = 6L;
        public final MemorySegment revents$ptr() {
            return segment().asSlice(6L);
        }
        public final short revents$get() {
            return (short) revents$VH.get(revents$ptr());
        }
        public final void revents$set(short value) {
            revents$VH.set(revents$ptr(), value);
        }
    }
    public static final class msghdr extends Struct<msghdr> {
        protected msghdr(MemorySegment ms) { super(ms); }
        public static final msghdr at(MemorySegment ms) { return new msghdr(ms); }
        public final msghdr offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_POINTER.withName("msg_name"),
            C_INT.withName("msg_namelen"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("msg_iov"),
            C_INT.withName("msg_iovlen"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("msg_control"),
            C_INT.withName("msg_controllen"),
            C_INT.withName("msg_flags")
        ).withName("msghdr");
        public static final msghdr allocate(NativeScope scope) { return new msghdr(scope.allocate($LAYOUT)); }
        public static final msghdr allocate(NativeScope scope, long count) { return new msghdr(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle msg_name$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("msg_name")));
        public static final long msg_name$OFFSET = 0L;
        public final MemorySegment msg_name$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress msg_name$get() {
            return (jdk.incubator.foreign.MemoryAddress) msg_name$VH.get(msg_name$ptr());
        }
        public final void msg_name$set(jdk.incubator.foreign.MemoryAddress value) {
            msg_name$VH.set(msg_name$ptr(), value);
        }

        public static final VarHandle msg_namelen$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("msg_namelen")));
        public static final long msg_namelen$OFFSET = 8L;
        public final MemorySegment msg_namelen$ptr() {
            return segment().asSlice(8L);
        }
        public final int msg_namelen$get() {
            return (int) msg_namelen$VH.get(msg_namelen$ptr());
        }
        public final void msg_namelen$set(int value) {
            msg_namelen$VH.set(msg_namelen$ptr(), value);
        }

        public static final VarHandle msg_iov$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("msg_iov")));
        public static final long msg_iov$OFFSET = 16L;
        public final MemorySegment msg_iov$ptr() {
            return segment().asSlice(16L);
        }
        public final jdk.incubator.foreign.MemoryAddress msg_iov$get() {
            return (jdk.incubator.foreign.MemoryAddress) msg_iov$VH.get(msg_iov$ptr());
        }
        public final void msg_iov$set(jdk.incubator.foreign.MemoryAddress value) {
            msg_iov$VH.set(msg_iov$ptr(), value);
        }

        public static final VarHandle msg_iovlen$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("msg_iovlen")));
        public static final long msg_iovlen$OFFSET = 24L;
        public final MemorySegment msg_iovlen$ptr() {
            return segment().asSlice(24L);
        }
        public final int msg_iovlen$get() {
            return (int) msg_iovlen$VH.get(msg_iovlen$ptr());
        }
        public final void msg_iovlen$set(int value) {
            msg_iovlen$VH.set(msg_iovlen$ptr(), value);
        }

        public static final VarHandle msg_control$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("msg_control")));
        public static final long msg_control$OFFSET = 32L;
        public final MemorySegment msg_control$ptr() {
            return segment().asSlice(32L);
        }
        public final jdk.incubator.foreign.MemoryAddress msg_control$get() {
            return (jdk.incubator.foreign.MemoryAddress) msg_control$VH.get(msg_control$ptr());
        }
        public final void msg_control$set(jdk.incubator.foreign.MemoryAddress value) {
            msg_control$VH.set(msg_control$ptr(), value);
        }

        public static final VarHandle msg_controllen$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("msg_controllen")));
        public static final long msg_controllen$OFFSET = 40L;
        public final MemorySegment msg_controllen$ptr() {
            return segment().asSlice(40L);
        }
        public final int msg_controllen$get() {
            return (int) msg_controllen$VH.get(msg_controllen$ptr());
        }
        public final void msg_controllen$set(int value) {
            msg_controllen$VH.set(msg_controllen$ptr(), value);
        }

        public static final VarHandle msg_flags$VH = RuntimeHelper.varHandle(int.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("msg_flags")));
        public static final long msg_flags$OFFSET = 44L;
        public final MemorySegment msg_flags$ptr() {
            return segment().asSlice(44L);
        }
        public final int msg_flags$get() {
            return (int) msg_flags$VH.get(msg_flags$ptr());
        }
        public final void msg_flags$set(int value) {
            msg_flags$VH.set(msg_flags$ptr(), value);
        }
    }
    public static final class iovec extends Struct<iovec> {
        protected iovec(MemorySegment ms) { super(ms); }
        public static final iovec at(MemorySegment ms) { return new iovec(ms); }
        public final iovec offset(int count) { return at(segment().asSlice(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_POINTER.withName("iov_base"),
            C_LONG.withName("iov_len")
        ).withName("iovec");
        public static final iovec allocate(NativeScope scope) { return new iovec(scope.allocate($LAYOUT)); }
        public static final iovec allocate(NativeScope scope, long count) { return new iovec(scope.allocateArray($LAYOUT, count)); }
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle iov_base$VH = RuntimeHelper.varHandle(jdk.incubator.foreign.MemoryAddress.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("iov_base")));
        public static final long iov_base$OFFSET = 0L;
        public final MemorySegment iov_base$ptr() {
            return segment().asSlice(0L);
        }
        public final jdk.incubator.foreign.MemoryAddress iov_base$get() {
            return (jdk.incubator.foreign.MemoryAddress) iov_base$VH.get(iov_base$ptr());
        }
        public final void iov_base$set(jdk.incubator.foreign.MemoryAddress value) {
            iov_base$VH.set(iov_base$ptr(), value);
        }

        public static final VarHandle iov_len$VH = RuntimeHelper.varHandle(long.class, $LAYOUT.select(MemoryLayout.PathElement.groupElement("iov_len")));
        public static final long iov_len$OFFSET = 8L;
        public final MemorySegment iov_len$ptr() {
            return segment().asSlice(8L);
        }
        public final long iov_len$get() {
            return (long) iov_len$VH.get(iov_len$ptr());
        }
        public final void iov_len$set(long value) {
            iov_len$VH.set(iov_len$ptr(), value);
        }
    }
    public static final int F_OK = (int)0L;
    public static final int SEEK_SET = (int)0L;
    public static final int SEEK_CUR = (int)1L;
    public static final int _SC_GETGR_R_SIZE_MAX = (int)70L;
    public static final int _SC_GETPW_R_SIZE_MAX = (int)71L;
    public static final int EPERM = (int)1L;
    public static final int ENOENT = (int)2L;
    public static final int ESRCH = (int)3L;
    public static final int EINTR = (int)4L;
    public static final int EBADF = (int)9L;
    public static final int EACCES = (int)13L;
    public static final int ERANGE = (int)34L;
    public static final int EAGAIN = (int)35L;
    public static final int ENOTSUP = (int)45L;
    public static final int ECONNREFUSED = (int)61L;
    public static final int ENAMETOOLONG = (int)63L;
    public static final int EOVERFLOW = (int)84L;
    public static final int ECANCELED = (int)89L;
    public static final int F_SETLK = (int)8L;
    public static final int F_SETLKW = (int)9L;
    public static final int F_NOCACHE = (int)48L;
    public static final int F_FULLFSYNC = (int)51L;
    public static final int F_RDLCK = (int)1L;
    public static final int F_UNLCK = (int)2L;
    public static final int F_WRLCK = (int)3L;
    public static final int SIGIO = (int)23L;
    public static final int INT_MAX = (int)2147483647L;
    public static final int IOV_MAX = (int)1024L;
    public static final int MNT_RDONLY = (int)1L;
    public static final int MNT_WAIT = (int)1L;
    public static final int MNT_NOWAIT = (int)2L;
    public static final int SOCK_STREAM = (int)1L;
    public static final int AF_UNIX = (int)1L;
    public static final int EWOULDBLOCK = (int)35L;
    public static final int EOF = (int)-1L;
    public static final MethodHandle mh_unlinkat = RuntimeHelper.downcallHandle(
        LIBRARIES, "unlinkat",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER,
            C_INT
        ), false
    );
    public static final int unlinkat(int x0, jdk.incubator.foreign.Addressable x1, int x2) {
        try {
            return (int) mh_unlinkat.invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_access = RuntimeHelper.downcallHandle(
        LIBRARIES, "access",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT
        ), false
    );
    public static final int access(jdk.incubator.foreign.Addressable x0, int x1) {
        try {
            return (int) mh_access.invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_chown = RuntimeHelper.downcallHandle(
        LIBRARIES, "chown",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT,
            C_INT
        ), false
    );
    public static final int chown(jdk.incubator.foreign.Addressable x0, int x1, int x2) {
        try {
            return (int) mh_chown.invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_close = RuntimeHelper.downcallHandle(
        LIBRARIES, "close",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        ), false
    );
    public static final int close(int x0) {
        try {
            return (int) mh_close.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_dup = RuntimeHelper.downcallHandle(
        LIBRARIES, "dup",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        ), false
    );
    public static final int dup(int x0) {
        try {
            return (int) mh_dup.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_dup2 = RuntimeHelper.downcallHandle(
        LIBRARIES, "dup2",
        "(II)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_INT
        ), false
    );
    public static final int dup2(int x0, int x1) {
        try {
            return (int) mh_dup2.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fpathconf = RuntimeHelper.downcallHandle(
        LIBRARIES, "fpathconf",
        "(II)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_INT
        ), false
    );
    public static final long fpathconf(int x0, int x1) {
        try {
            return (long) mh_fpathconf.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_getcwd = RuntimeHelper.downcallHandle(
        LIBRARIES, "getcwd",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_LONG
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress getcwd(jdk.incubator.foreign.Addressable x0, long x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_getcwd.invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_link = RuntimeHelper.downcallHandle(
        LIBRARIES, "link",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int link(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_link.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_lseek = RuntimeHelper.downcallHandle(
        LIBRARIES, "lseek",
        "(IJI)J",
        FunctionDescriptor.of(C_LONGLONG,
            C_INT,
            C_LONGLONG,
            C_INT
        ), false
    );
    public static final long lseek(int x0, long x1, int x2) {
        try {
            return (long) mh_lseek.invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_pathconf = RuntimeHelper.downcallHandle(
        LIBRARIES, "pathconf",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        FunctionDescriptor.of(C_LONG,
            C_POINTER,
            C_INT
        ), false
    );
    public static final long pathconf(jdk.incubator.foreign.Addressable x0, int x1) {
        try {
            return (long) mh_pathconf.invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_read = RuntimeHelper.downcallHandle(
        LIBRARIES, "read",
        "(ILjdk/incubator/foreign/MemoryAddress;J)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_LONG
        ), false
    );
    public static final long read(int x0, jdk.incubator.foreign.Addressable x1, long x2) {
        try {
            return (long) mh_read.invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_rmdir = RuntimeHelper.downcallHandle(
        LIBRARIES, "rmdir",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        ), false
    );
    public static final int rmdir(jdk.incubator.foreign.Addressable x0) {
        try {
            return (int) mh_rmdir.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_sysconf = RuntimeHelper.downcallHandle(
        LIBRARIES, "sysconf",
        "(I)J",
        FunctionDescriptor.of(C_LONG,
            C_INT
        ), false
    );
    public static final long sysconf(int x0) {
        try {
            return (long) mh_sysconf.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_unlink = RuntimeHelper.downcallHandle(
        LIBRARIES, "unlink",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        ), false
    );
    public static final int unlink(jdk.incubator.foreign.Addressable x0) {
        try {
            return (int) mh_unlink.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_write = RuntimeHelper.downcallHandle(
        LIBRARIES, "write",
        "(ILjdk/incubator/foreign/MemoryAddress;J)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_LONG
        ), false
    );
    public static final long write(int __fd, jdk.incubator.foreign.Addressable __buf, long __nbyte) {
        try {
            return (long) mh_write.invokeExact(__fd, __buf.address(), __nbyte);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_lchown = RuntimeHelper.downcallHandle(
        LIBRARIES, "lchown",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT,
            C_INT
        ), false
    );
    public static final int lchown(jdk.incubator.foreign.Addressable x0, int x1, int x2) {
        try {
            return (int) mh_lchown.invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_pread = RuntimeHelper.downcallHandle(
        LIBRARIES, "pread",
        "(ILjdk/incubator/foreign/MemoryAddress;JJ)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONGLONG
        ), false
    );
    public static final long pread(int __fd, jdk.incubator.foreign.Addressable __buf, long __nbyte, long __offset) {
        try {
            return (long) mh_pread.invokeExact(__fd, __buf.address(), __nbyte, __offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_pwrite = RuntimeHelper.downcallHandle(
        LIBRARIES, "pwrite",
        "(ILjdk/incubator/foreign/MemoryAddress;JJ)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONGLONG
        ), false
    );
    public static final long pwrite(int __fd, jdk.incubator.foreign.Addressable __buf, long __nbyte, long __offset) {
        try {
            return (long) mh_pwrite.invokeExact(__fd, __buf.address(), __nbyte, __offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fsync = RuntimeHelper.downcallHandle(
        LIBRARIES, "fsync",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        ), false
    );
    public static final int fsync(int x0) {
        try {
            return (int) mh_fsync.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_ftruncate = RuntimeHelper.downcallHandle(
        LIBRARIES, "ftruncate",
        "(IJ)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_LONGLONG
        ), false
    );
    public static final int ftruncate(int x0, long x1) {
        try {
            return (int) mh_ftruncate.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fchown = RuntimeHelper.downcallHandle(
        LIBRARIES, "fchown",
        "(III)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_INT,
            C_INT
        ), false
    );
    public static final int fchown(int x0, int x1, int x2) {
        try {
            return (int) mh_fchown.invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_readlink = RuntimeHelper.downcallHandle(
        LIBRARIES, "readlink",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        FunctionDescriptor.of(C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        ), false
    );
    public static final long readlink(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1, long x2) {
        try {
            return (long) mh_readlink.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_symlink = RuntimeHelper.downcallHandle(
        LIBRARIES, "symlink",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int symlink(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_symlink.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_mknod = RuntimeHelper.downcallHandle(
        LIBRARIES, "mknod",
        "(Ljdk/incubator/foreign/MemoryAddress;SI)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_SHORT,
            C_INT
        ), false
    );
    public static final int mknod(jdk.incubator.foreign.Addressable x0, short x1, int x2) {
        try {
            return (int) mh_mknod.invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh___error = RuntimeHelper.downcallHandle(
        LIBRARIES, "__error",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER), false
    );
    public static final jdk.incubator.foreign.MemoryAddress __error() {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh___error.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_chmod = RuntimeHelper.downcallHandle(
        LIBRARIES, "chmod",
        "(Ljdk/incubator/foreign/MemoryAddress;S)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_SHORT
        ), false
    );
    public static final int chmod(jdk.incubator.foreign.Addressable x0, short x1) {
        try {
            return (int) mh_chmod.invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fchmod = RuntimeHelper.downcallHandle(
        LIBRARIES, "fchmod",
        "(IS)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_SHORT
        ), false
    );
    public static final int fchmod(int x0, short x1) {
        try {
            return (int) mh_fchmod.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_mkdir = RuntimeHelper.downcallHandle(
        LIBRARIES, "mkdir",
        "(Ljdk/incubator/foreign/MemoryAddress;S)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_SHORT
        ), false
    );
    public static final int mkdir(jdk.incubator.foreign.Addressable x0, short x1) {
        try {
            return (int) mh_mkdir.invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_stat = RuntimeHelper.downcallHandle(
        LIBRARIES, "stat$INODE64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int stat(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_stat.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fstatat = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstatat$INODE64",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        ), false
    );
    public static final int fstatat(int x0, jdk.incubator.foreign.Addressable x1, jdk.incubator.foreign.Addressable x2, int x3) {
        try {
            return (int) mh_fstatat.invokeExact(x0, x1.address(), x2.address(), x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_futimens = RuntimeHelper.downcallHandle(
        LIBRARIES, "futimens",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER
        ), false
    );
    public static final int futimens(int __fd, jdk.incubator.foreign.Addressable __times) {
        try {
            return (int) mh_futimens.invokeExact(__fd, __times.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fstat64 = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstat64",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER
        ), false
    );
    public static final int fstat64(int x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_fstat64.invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_lstat64 = RuntimeHelper.downcallHandle(
        LIBRARIES, "lstat64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int lstat64(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_lstat64.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_stat64 = RuntimeHelper.downcallHandle(
        LIBRARIES, "stat64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int stat64(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_stat64.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_open = RuntimeHelper.downcallHandle(
        LIBRARIES, "open",
        "(Ljdk/incubator/foreign/MemoryAddress;I[Ljava/lang/Object;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT
        ), true
    );
    public static final int open(jdk.incubator.foreign.Addressable x0, int x1, Object... x2) {
        try {
            return (int) mh_open.invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_openat = RuntimeHelper.downcallHandle(
        LIBRARIES, "openat",
        "(ILjdk/incubator/foreign/MemoryAddress;I[Ljava/lang/Object;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER,
            C_INT
        ), true
    );
    public static final int openat(int x0, jdk.incubator.foreign.Addressable x1, int x2, Object... x3) {
        try {
            return (int) mh_openat.invokeExact(x0, x1.address(), x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fcntl = RuntimeHelper.downcallHandle(
        LIBRARIES, "fcntl",
        "(II[Ljava/lang/Object;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_INT
        ), true
    );
    public static final int fcntl(int x0, int x1, Object... x2) {
        try {
            return (int) mh_fcntl.invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_flock = RuntimeHelper.downcallHandle(
        LIBRARIES, "flock",
        "(II)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_INT
        ), false
    );
    public static final int flock(int x0, int x1) {
        try {
            return (int) mh_flock.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_strerror_r = RuntimeHelper.downcallHandle(
        LIBRARIES, "strerror_r",
        "(ILjdk/incubator/foreign/MemoryAddress;J)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER,
            C_LONG
        ), false
    );
    public static final int strerror_r(int __errnum, jdk.incubator.foreign.Addressable __strerrbuf, long __buflen) {
        try {
            return (int) mh_strerror_r.invokeExact(__errnum, __strerrbuf.address(), __buflen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_renameat = RuntimeHelper.downcallHandle(
        LIBRARIES, "renameat",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER
        ), false
    );
    public static final int renameat(int x0, jdk.incubator.foreign.Addressable x1, int x2, jdk.incubator.foreign.Addressable x3) {
        try {
            return (int) mh_renameat.invokeExact(x0, x1.address(), x2, x3.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fclose = RuntimeHelper.downcallHandle(
        LIBRARIES, "fclose",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        ), false
    );
    public static final int fclose(jdk.incubator.foreign.Addressable x0) {
        try {
            return (int) mh_fclose.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_feof = RuntimeHelper.downcallHandle(
        LIBRARIES, "feof",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        ), false
    );
    public static final int feof(jdk.incubator.foreign.Addressable x0) {
        try {
            return (int) mh_feof.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_ferror = RuntimeHelper.downcallHandle(
        LIBRARIES, "ferror",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        ), false
    );
    public static final int ferror(jdk.incubator.foreign.Addressable x0) {
        try {
            return (int) mh_ferror.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fopen = RuntimeHelper.downcallHandle(
        LIBRARIES, "fopen$DARWIN_EXTSN",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress fopen(jdk.incubator.foreign.Addressable __filename, jdk.incubator.foreign.Addressable __mode) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_fopen.invokeExact(__filename.address(), __mode.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_rename = RuntimeHelper.downcallHandle(
        LIBRARIES, "rename",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int rename(jdk.incubator.foreign.Addressable __old, jdk.incubator.foreign.Addressable __new) {
        try {
            return (int) mh_rename.invokeExact(__old.address(), __new.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_rewind = RuntimeHelper.downcallHandle(
        LIBRARIES, "rewind",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        ), false
    );
    public static final void rewind(jdk.incubator.foreign.Addressable x0) {
        try {
            mh_rewind.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_getline = RuntimeHelper.downcallHandle(
        LIBRARIES, "getline",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J",
        FunctionDescriptor.of(C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final long getline(jdk.incubator.foreign.Addressable __linep, jdk.incubator.foreign.Addressable __linecapp, jdk.incubator.foreign.Addressable __stream) {
        try {
            return (long) mh_getline.invokeExact(__linep.address(), __linecapp.address(), __stream.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_free = RuntimeHelper.downcallHandle(
        LIBRARIES, "free",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        ), false
    );
    public static final void free(jdk.incubator.foreign.Addressable x0) {
        try {
            mh_free.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_realpath = RuntimeHelper.downcallHandle(
        LIBRARIES, "realpath$DARWIN_EXTSN",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress realpath(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_realpath.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_futimes = RuntimeHelper.downcallHandle(
        LIBRARIES, "futimes",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER
        ), false
    );
    public static final int futimes(int x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_futimes.invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_lutimes = RuntimeHelper.downcallHandle(
        LIBRARIES, "lutimes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int lutimes(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_lutimes.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_utimes = RuntimeHelper.downcallHandle(
        LIBRARIES, "utimes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int utimes(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_utimes.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_closedir = RuntimeHelper.downcallHandle(
        LIBRARIES, "closedir",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        ), false
    );
    public static final int closedir(jdk.incubator.foreign.Addressable x0) {
        try {
            return (int) mh_closedir.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_opendir = RuntimeHelper.downcallHandle(
        LIBRARIES, "opendir$INODE64",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress opendir(jdk.incubator.foreign.Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_opendir.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_readdir = RuntimeHelper.downcallHandle(
        LIBRARIES, "readdir$INODE64",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress readdir(jdk.incubator.foreign.Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_readdir.invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fdopendir = RuntimeHelper.downcallHandle(
        LIBRARIES, "fdopendir$INODE64",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_INT
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress fdopendir(int x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_fdopendir.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_getpwuid_r = RuntimeHelper.downcallHandle(
        LIBRARIES, "getpwuid_r",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        ), false
    );
    public static final int getpwuid_r(int x0, jdk.incubator.foreign.Addressable x1, jdk.incubator.foreign.Addressable x2, long x3, jdk.incubator.foreign.Addressable x4) {
        try {
            return (int) mh_getpwuid_r.invokeExact(x0, x1.address(), x2.address(), x3, x4.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_getpwnam_r = RuntimeHelper.downcallHandle(
        LIBRARIES, "getpwnam_r",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        ), false
    );
    public static final int getpwnam_r(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1, jdk.incubator.foreign.Addressable x2, long x3, jdk.incubator.foreign.Addressable x4) {
        try {
            return (int) mh_getpwnam_r.invokeExact(x0.address(), x1.address(), x2.address(), x3, x4.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_getgrgid_r = RuntimeHelper.downcallHandle(
        LIBRARIES, "getgrgid_r",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        ), false
    );
    public static final int getgrgid_r(int x0, jdk.incubator.foreign.Addressable x1, jdk.incubator.foreign.Addressable x2, long x3, jdk.incubator.foreign.Addressable x4) {
        try {
            return (int) mh_getgrgid_r.invokeExact(x0, x1.address(), x2.address(), x3, x4.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_getgrnam_r = RuntimeHelper.downcallHandle(
        LIBRARIES, "getgrnam_r",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        ), false
    );
    public static final int getgrnam_r(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1, jdk.incubator.foreign.Addressable x2, long x3, jdk.incubator.foreign.Addressable x4) {
        try {
            return (int) mh_getgrnam_r.invokeExact(x0.address(), x1.address(), x2.address(), x3, x4.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_fstatvfs = RuntimeHelper.downcallHandle(
        LIBRARIES, "fstatvfs",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER
        ), false
    );
    public static final int fstatvfs(int x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_fstatvfs.invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_statvfs = RuntimeHelper.downcallHandle(
        LIBRARIES, "statvfs",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int statvfs(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_statvfs.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_getfsstat = RuntimeHelper.downcallHandle(
        LIBRARIES, "getfsstat$INODE64",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT,
            C_INT
        ), false
    );
    public static final int getfsstat(jdk.incubator.foreign.Addressable x0, int x1, int x2) {
        try {
            return (int) mh_getfsstat.invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_statfs = RuntimeHelper.downcallHandle(
        LIBRARIES, "statfs$INODE64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int statfs(jdk.incubator.foreign.Addressable x0, jdk.incubator.foreign.Addressable x1) {
        try {
            return (int) mh_statfs.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_kqueue = RuntimeHelper.downcallHandle(
        LIBRARIES, "kqueue",
        "()I",
        FunctionDescriptor.of(C_INT), false
    );
    public static final int kqueue() {
        try {
            return (int) mh_kqueue.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_kevent = RuntimeHelper.downcallHandle(
        LIBRARIES, "kevent",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER
        ), false
    );
    public static final int kevent(int kq, jdk.incubator.foreign.Addressable changelist, int nchanges, jdk.incubator.foreign.Addressable eventlist, int nevents, jdk.incubator.foreign.Addressable timeout) {
        try {
            return (int) mh_kevent.invokeExact(kq, changelist.address(), nchanges, eventlist.address(), nevents, timeout.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_pthread_self = RuntimeHelper.downcallHandle(
        LIBRARIES, "pthread_self",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER), false
    );
    public static final jdk.incubator.foreign.MemoryAddress pthread_self() {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_pthread_self.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_pthread_kill = RuntimeHelper.downcallHandle(
        LIBRARIES, "pthread_kill",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT
        ), false
    );
    public static final int pthread_kill(jdk.incubator.foreign.Addressable x0, int x1) {
        try {
            return (int) mh_pthread_kill.invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_poll = RuntimeHelper.downcallHandle(
        LIBRARIES, "poll",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT,
            C_INT
        ), false
    );
    public static final int poll(jdk.incubator.foreign.Addressable x0, int x1, int x2) {
        try {
            return (int) mh_poll.invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_recv = RuntimeHelper.downcallHandle(
        LIBRARIES, "recv",
        "(ILjdk/incubator/foreign/MemoryAddress;JI)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_LONG,
            C_INT
        ), false
    );
    public static final long recv(int x0, jdk.incubator.foreign.Addressable x1, long x2, int x3) {
        try {
            return (long) mh_recv.invokeExact(x0, x1.address(), x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_recvmsg = RuntimeHelper.downcallHandle(
        LIBRARIES, "recvmsg",
        "(ILjdk/incubator/foreign/MemoryAddress;I)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_INT
        ), false
    );
    public static final long recvmsg(int x0, jdk.incubator.foreign.Addressable x1, int x2) {
        try {
            return (long) mh_recvmsg.invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_send = RuntimeHelper.downcallHandle(
        LIBRARIES, "send",
        "(ILjdk/incubator/foreign/MemoryAddress;JI)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_LONG,
            C_INT
        ), false
    );
    public static final long send(int x0, jdk.incubator.foreign.Addressable x1, long x2, int x3) {
        try {
            return (long) mh_send.invokeExact(x0, x1.address(), x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_sendmsg = RuntimeHelper.downcallHandle(
        LIBRARIES, "sendmsg",
        "(ILjdk/incubator/foreign/MemoryAddress;I)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_INT
        ), false
    );
    public static final long sendmsg(int x0, jdk.incubator.foreign.Addressable x1, int x2) {
        try {
            return (long) mh_sendmsg.invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_socketpair = RuntimeHelper.downcallHandle(
        LIBRARIES, "socketpair",
        "(IIILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_INT,
            C_INT,
            C_POINTER
        ), false
    );
    public static final int socketpair(int x0, int x1, int x2, jdk.incubator.foreign.Addressable x3) {
        try {
            return (int) mh_socketpair.invokeExact(x0, x1, x2, x3.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_readv = RuntimeHelper.downcallHandle(
        LIBRARIES, "readv",
        "(ILjdk/incubator/foreign/MemoryAddress;I)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_INT
        ), false
    );
    public static final long readv(int x0, jdk.incubator.foreign.Addressable x1, int x2) {
        try {
            return (long) mh_readv.invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_writev = RuntimeHelper.downcallHandle(
        LIBRARIES, "writev",
        "(ILjdk/incubator/foreign/MemoryAddress;I)J",
        FunctionDescriptor.of(C_LONG,
            C_INT,
            C_POINTER,
            C_INT
        ), false
    );
    public static final long writev(int x0, jdk.incubator.foreign.Addressable x1, int x2) {
        try {
            return (long) mh_writev.invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
}

